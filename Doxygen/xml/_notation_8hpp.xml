<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_notation_8hpp" kind="file" language="C++">
    <compoundname>Notation.hpp</compoundname>
    <includes refid="_call_8hpp" local="yes">Rules/Notation/Call.hpp</includes>
    <includes refid="_call_8ipp" local="yes">Rules/Notation/Call.ipp</includes>
    <includes refid="_phi_8ipp" local="yes">Rules/Notation/Phi.ipp</includes>
    <includes refid="_any_pattern_8hpp" local="yes">Rules/Patterns/AnyPattern.hpp</includes>
    <includes refid="_call_pattern_8hpp" local="yes">Rules/Patterns/CallPattern.hpp</includes>
    <includes refid="_instruction_8hpp" local="yes">Rules/Patterns/Instruction.hpp</includes>
    <includes refid="_phi_pattern_8hpp" local="yes">Rules/Patterns/PhiPattern.hpp</includes>
    <includes refid="_llvm_8hpp" local="yes">Llvm/Llvm.hpp</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">vector</includes>
    <includedby refid="_factory_8cpp" local="yes">Rules/Factory.cpp</includedby>
    <includedby refid="_basic_block_8cpp" local="yes">Rules/Notation/BasicBlock.cpp</includedby>
    <includedby refid="_bit_cast_8cpp" local="yes">Rules/Notation/BitCast.cpp</includedby>
    <includedby refid="_branch_8cpp" local="yes">Rules/Notation/Branch.cpp</includedby>
    <includedby refid="_call_by_name_only_8cpp" local="yes">Rules/Notation/CallByNameOnly.cpp</includedby>
    <includedby refid="_capture_8cpp" local="yes">Rules/Notation/Capture.cpp</includedby>
    <includedby refid="_const_int_8cpp" local="yes">Rules/Notation/ConstInt.cpp</includedby>
    <includedby refid="_int_to_ptr_8cpp" local="yes">Rules/Notation/IntToPtr.cpp</includedby>
    <includedby refid="_load_8cpp" local="yes">Rules/Notation/Load.cpp</includedby>
    <includedby refid="_notation_8cpp" local="yes">Rules/Notation/Notation.cpp</includedby>
    <includedby refid="_phi_8ipp" local="yes">Rules/Notation/Phi.ipp</includedby>
    <includedby refid="_select_8cpp" local="yes">Rules/Notation/Select.cpp</includedby>
    <includedby refid="_store_8cpp" local="yes">Rules/Notation/Store.cpp</includedby>
    <includedby refid="_switch_8cpp" local="yes">Rules/Notation/Switch.cpp</includedby>
    <includedby refid="_unnamed_invoke_8cpp" local="yes">Rules/Notation/UnnamedInvoke.cpp</includedby>
    <includedby refid="_basic_rule_set_ops_8cpp" local="yes">Rules/Tests/Unit/BasicRuleSetOps.cpp</includedby>
    <includedby refid="_transformation_rules_pass_8cpp" local="yes">TransformationRulesPass/TransformationRulesPass.cpp</includedby>
    <incdepgraph>
      <node id="41">
        <label>Rules/Patterns/Instruction.hpp</label>
        <link refid="_instruction_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>llvm/IR/Module.h</label>
      </node>
      <node id="3">
        <label>Rules/IOperandPrototype.hpp</label>
        <link refid="_i_operand_prototype_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>llvm/IR/IRBuilder.h</label>
      </node>
      <node id="39">
        <label>Rules/Patterns/AnyPattern.hpp</label>
        <link refid="_any_pattern_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>llvm/IR/Function.h</label>
      </node>
      <node id="30">
        <label>llvm/InitializePasses.h</label>
      </node>
      <node id="17">
        <label>llvm/IR/LLVMContext.h</label>
      </node>
      <node id="8">
        <label>llvm/Support/raw_ostream.h</label>
      </node>
      <node id="5">
        <label>llvm/Analysis/InlineCost.h</label>
      </node>
      <node id="31">
        <label>llvm/LinkAllIR.h</label>
      </node>
      <node id="33">
        <label>llvm/Passes/StandardInstrumentations.h</label>
      </node>
      <node id="4">
        <label>Llvm/Llvm.hpp</label>
        <link refid="_llvm_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>llvm/Support/TargetSelect.h</label>
      </node>
      <node id="20">
        <label>llvm/IR/Verifier.h</label>
      </node>
      <node id="1">
        <label>Rules/Notation/Notation.hpp</label>
        <link refid="_notation_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>llvm/Transforms/Scalar/DCE.h</label>
      </node>
      <node id="23">
        <label>llvm/Transforms/Scalar/LoopUnrollPass.h</label>
      </node>
      <node id="25">
        <label>llvm/Transforms/Scalar/ADCE.h</label>
      </node>
      <node id="32">
        <label>llvm/MC/SubtargetFeature.h</label>
      </node>
      <node id="7">
        <label>llvm/Passes/PassPlugin.h</label>
      </node>
      <node id="38">
        <label>vector</label>
      </node>
      <node id="24">
        <label>llvm/LinkAllPasses.h</label>
      </node>
      <node id="12">
        <label>llvm/IR/BasicBlock.h</label>
      </node>
      <node id="42">
        <label>Rules/Patterns/PhiPattern.hpp</label>
        <link refid="_phi_pattern_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>llvm/Target/TargetMachine.h</label>
      </node>
      <node id="9">
        <label>llvm/Transforms/IPO/Inliner.h</label>
      </node>
      <node id="37">
        <label>unordered_map</label>
      </node>
      <node id="21">
        <label>llvm/IRReader/IRReader.h</label>
      </node>
      <node id="11">
        <label>llvm/Transforms/Utils/Cloning.h</label>
      </node>
      <node id="6">
        <label>llvm/Passes/PassBuilder.h</label>
      </node>
      <node id="40">
        <label>Rules/Patterns/CallPattern.hpp</label>
        <link refid="_call_pattern_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>llvm/IR/Constants.h</label>
      </node>
      <node id="19">
        <label>llvm/IR/Type.h</label>
      </node>
      <node id="34">
        <label>llvm/Support/InitLLVM.h</label>
      </node>
      <node id="29">
        <label>llvm/Bitcode/BitcodeWriter.h</label>
      </node>
      <node id="28">
        <label>llvm/Linker/Linker.h</label>
      </node>
      <node id="2">
        <label>Rules/Notation/Call.hpp</label>
        <link refid="_call_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>llvm/Transforms/Utils/BasicBlockUtils.h</label>
      </node>
      <node id="27">
        <label>llvm/Analysis/ConstantFolding.h</label>
      </node>
      <node id="14">
        <label>llvm/IR/DerivedTypes.h</label>
      </node>
      <node id="22">
        <label>llvm/Support/SourceMgr.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="classmicrosoft_1_1quantum_1_1notation_1_1_capture" prot="public">microsoft::quantum::notation::Capture</innerclass>
    <innernamespace refid="namespacemicrosoft">microsoft</innernamespace>
    <innernamespace refid="namespacemicrosoft_1_1quantum">microsoft::quantum</innernamespace>
    <innernamespace refid="namespacemicrosoft_1_1quantum_1_1notation">microsoft::quantum::notation</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>Microsoft<sp/>Corporation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Rules/Notation/Call.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Rules/Notation/Call.ipp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Rules/Notation/Phi.ipp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Rules/Patterns/AnyPattern.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Rules/Patterns/CallPattern.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Rules/Patterns/Instruction.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Rules/Patterns/PhiPattern.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Llvm/Llvm.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">microsoft</highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">quantum</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">notation</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>IOperandPrototypePtr<sp/>=<sp/>std::shared_ptr&lt;IOperandPrototype&gt;;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ReplacerFunction<sp/><sp/><sp/><sp/><sp/>=<sp/>std::function&lt;bool(</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmicrosoft_1_1quantum_1_1_replacement_rule_1ab975e38f598fc4e3a84039f84ab404d1" kindref="member">ReplacementRule::Builder</ref>&amp;,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmicrosoft_1_1quantum_1_1_replacement_rule_1afd9ba523c6b96524a36d66f81a3dbd3d" kindref="member">ReplacementRule::Value</ref>*,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmicrosoft_1_1quantum_1_1_replacement_rule_1a5d9d153c6aede2708519758e4386cfad" kindref="member">ReplacementRule::Captures</ref>&amp;,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmicrosoft_1_1quantum_1_1_replacement_rule_1aca9c759c6f4aace29dc3b0b3b05ce9e1" kindref="member">ReplacementRule::Replacements</ref>&amp;)&gt;;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="classmicrosoft_1_1quantum_1_1notation_1_1_capture" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmicrosoft_1_1quantum_1_1notation_1_1_capture" kindref="compound">Capture</ref></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="group__shorthand_notation_1ga75cc713660bd3bfdae9ed36001c31591" kindref="member">Capture</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>this<sp/>operator<sp/>is<sp/>delibrately<sp/>unconventional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IOperandPrototypePtr<sp/>operator=(IOperandPrototypePtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other);<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name_{};<sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;<sp/>IOperandPrototypePtr<sp/><ref refid="group__shorthand_notation_1gabb463c16465034b9d9b85290edd9a4bc" kindref="member">call</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/>Args...<sp/>args);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IOperandPrototypePtr<sp/><ref refid="group__shorthand_notation_1gad1881ef24c25dfceb3ad71f18aa2c43f" kindref="member">unnamedInvoke</ref>();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;<sp/>IOperandPrototypePtr<sp/><ref refid="group__shorthand_notation_1gad70623d62fe54e6077fd102a33a93e5b" kindref="member">phi</ref>(Args...<sp/>args);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IOperandPrototypePtr<sp/><ref refid="group__shorthand_notation_1ga766351375d479dbb164ee827ee330219" kindref="member">callByNameOnly</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IOperandPrototypePtr<sp/><ref refid="group__shorthand_notation_1gad649d125a7dfa6d4fd594400b1638683" kindref="member">bitCast</ref>(IOperandPrototypePtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>arg);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IOperandPrototypePtr<sp/><ref refid="group__shorthand_notation_1gacdb76f23b9282dead50b4b5bf6c6ab64" kindref="member">intToPtr</ref>(IOperandPrototypePtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>arg);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IOperandPrototypePtr<sp/><ref refid="group__shorthand_notation_1gaea3374cd06fe2f3b4d9bff4ad23a4af4" kindref="member">constInt</ref>();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IOperandPrototypePtr<sp/><ref refid="group__shorthand_notation_1gad06c9d1eace6451c6cb6a80150b87576" kindref="member">branch</ref>(</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IOperandPrototypePtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>cond,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IOperandPrototypePtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>arg1,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IOperandPrototypePtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>arg2);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IOperandPrototypePtr<sp/>switchOp(</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IOperandPrototypePtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>cond,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IOperandPrototypePtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>arg1,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IOperandPrototypePtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>arg2);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IOperandPrototypePtr<sp/><ref refid="group__shorthand_notation_1ga2b184fe960d85fd09167f16c833907b3" kindref="member">select</ref>(</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IOperandPrototypePtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>cond,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IOperandPrototypePtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>arg1,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IOperandPrototypePtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>arg2);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IOperandPrototypePtr<sp/><ref refid="group__shorthand_notation_1ga44ddd41276fac20964ede0e3b3a2c864" kindref="member">load</ref>(IOperandPrototypePtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>arg);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IOperandPrototypePtr<sp/><ref refid="group__shorthand_notation_1ga2fb129cfb7135e02513ac0eea14b94bc" kindref="member">store</ref>(IOperandPrototypePtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>target,<sp/>IOperandPrototypePtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>value);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IOperandPrototypePtr<sp/><ref refid="group__shorthand_notation_1ga1df4795986302aa16342db829b457071" kindref="member">basicBlock</ref>();</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;AnyPattern&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_<sp/>=<sp/>std::make_shared&lt;AnyPattern&gt;();<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"></codeline>
<codeline lineno="167"></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReplacerFunction<sp/><ref refid="group__shorthand_notation_1gae89b441f450b5df53717bbf6f5c134c4" kindref="member">deleteInstruction</ref>();</highlight></codeline>
<codeline lineno="178"></codeline>
<codeline lineno="182"></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmicrosoft_1_1quantum_1_1notation_1_1_capture" kindref="compound">Capture</ref><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">_cap(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>name,<sp/>std::size_t);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>notation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>quantum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>microsoft</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Rules/Notation/Notation.hpp"/>
  </compounddef>
</doxygen>
