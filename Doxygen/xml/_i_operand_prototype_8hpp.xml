<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_i_operand_prototype_8hpp" kind="file" language="C++">
    <compoundname>IOperandPrototype.hpp</compoundname>
    <includes refid="_llvm_8hpp" local="yes">Llvm/Llvm.hpp</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">vector</includes>
    <includedby refid="_i_operand_prototype_8cpp" local="yes">Rules/IOperandPrototype.cpp</includedby>
    <includedby refid="_call_8hpp" local="yes">Rules/Notation/Call.hpp</includedby>
    <includedby refid="_any_pattern_8cpp" local="yes">Rules/Patterns/AnyPattern.cpp</includedby>
    <includedby refid="_any_pattern_8hpp" local="yes">Rules/Patterns/AnyPattern.hpp</includedby>
    <includedby refid="_call_pattern_8cpp" local="yes">Rules/Patterns/CallPattern.cpp</includedby>
    <includedby refid="_call_pattern_8hpp" local="yes">Rules/Patterns/CallPattern.hpp</includedby>
    <includedby refid="_instruction_8cpp" local="yes">Rules/Patterns/Instruction.cpp</includedby>
    <includedby refid="_instruction_8hpp" local="yes">Rules/Patterns/Instruction.hpp</includedby>
    <includedby refid="_phi_pattern_8cpp" local="yes">Rules/Patterns/PhiPattern.cpp</includedby>
    <includedby refid="_phi_pattern_8hpp" local="yes">Rules/Patterns/PhiPattern.hpp</includedby>
    <includedby refid="_unnamed_invoke_pattern_8cpp" local="yes">Rules/Patterns/UnnamedInvokePattern.cpp</includedby>
    <includedby refid="_unnamed_invoke_pattern_8hpp" local="yes">Rules/Patterns/UnnamedInvokePattern.hpp</includedby>
    <includedby refid="_rule_set_8hpp" local="yes">Rules/RuleSet.hpp</includedby>
    <incdepgraph>
      <node id="16">
        <label>llvm/IR/Module.h</label>
      </node>
      <node id="1">
        <label>Rules/IOperandPrototype.hpp</label>
        <link refid="_i_operand_prototype_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>llvm/IR/IRBuilder.h</label>
      </node>
      <node id="13">
        <label>llvm/IR/Function.h</label>
      </node>
      <node id="28">
        <label>llvm/InitializePasses.h</label>
      </node>
      <node id="15">
        <label>llvm/IR/LLVMContext.h</label>
      </node>
      <node id="6">
        <label>llvm/Support/raw_ostream.h</label>
      </node>
      <node id="3">
        <label>llvm/Analysis/InlineCost.h</label>
      </node>
      <node id="29">
        <label>llvm/LinkAllIR.h</label>
      </node>
      <node id="31">
        <label>llvm/Passes/StandardInstrumentations.h</label>
      </node>
      <node id="2">
        <label>Llvm/Llvm.hpp</label>
        <link refid="_llvm_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>llvm/Support/TargetSelect.h</label>
      </node>
      <node id="18">
        <label>llvm/IR/Verifier.h</label>
      </node>
      <node id="24">
        <label>llvm/Transforms/Scalar/DCE.h</label>
      </node>
      <node id="21">
        <label>llvm/Transforms/Scalar/LoopUnrollPass.h</label>
      </node>
      <node id="23">
        <label>llvm/Transforms/Scalar/ADCE.h</label>
      </node>
      <node id="30">
        <label>llvm/MC/SubtargetFeature.h</label>
      </node>
      <node id="5">
        <label>llvm/Passes/PassPlugin.h</label>
      </node>
      <node id="36">
        <label>vector</label>
      </node>
      <node id="22">
        <label>llvm/LinkAllPasses.h</label>
      </node>
      <node id="10">
        <label>llvm/IR/BasicBlock.h</label>
      </node>
      <node id="34">
        <label>llvm/Target/TargetMachine.h</label>
      </node>
      <node id="7">
        <label>llvm/Transforms/IPO/Inliner.h</label>
      </node>
      <node id="35">
        <label>unordered_map</label>
      </node>
      <node id="19">
        <label>llvm/IRReader/IRReader.h</label>
      </node>
      <node id="9">
        <label>llvm/Transforms/Utils/Cloning.h</label>
      </node>
      <node id="4">
        <label>llvm/Passes/PassBuilder.h</label>
      </node>
      <node id="11">
        <label>llvm/IR/Constants.h</label>
      </node>
      <node id="17">
        <label>llvm/IR/Type.h</label>
      </node>
      <node id="32">
        <label>llvm/Support/InitLLVM.h</label>
      </node>
      <node id="27">
        <label>llvm/Bitcode/BitcodeWriter.h</label>
      </node>
      <node id="26">
        <label>llvm/Linker/Linker.h</label>
      </node>
      <node id="8">
        <label>llvm/Transforms/Utils/BasicBlockUtils.h</label>
      </node>
      <node id="25">
        <label>llvm/Analysis/ConstantFolding.h</label>
      </node>
      <node id="12">
        <label>llvm/IR/DerivedTypes.h</label>
      </node>
      <node id="20">
        <label>llvm/Support/SourceMgr.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="11">
        <label>Rules/Patterns/Instruction.hpp</label>
        <link refid="_instruction_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>Rules/IOperandPrototype.hpp</label>
        <link refid="_i_operand_prototype_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Rules/Patterns/AnyPattern.hpp</label>
        <link refid="_any_pattern_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>TransformationRulesPass/TransformationRulesPass.hpp</label>
        <link refid="_transformation_rules_pass_8hpp_source"/>
      </node>
      <node id="3">
        <label>Rules/Notation/Notation.hpp</label>
        <link refid="_notation_8hpp_source"/>
      </node>
      <node id="5">
        <label>Rules/ReplacementRule.hpp</label>
        <link refid="_replacement_rule_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>Rules/Patterns/PhiPattern.hpp</label>
        <link refid="_phi_pattern_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>Generators/DefaultProfileGenerator.hpp</label>
        <link refid="_default_profile_generator_8hpp_source"/>
      </node>
      <node id="13">
        <label>Rules/Patterns/UnnamedInvokePattern.hpp</label>
        <link refid="_unnamed_invoke_pattern_8hpp_source"/>
      </node>
      <node id="10">
        <label>Rules/Patterns/CallPattern.hpp</label>
        <link refid="_call_pattern_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>Rules/RuleSet.hpp</label>
        <link refid="_rule_set_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Rules/Notation/Call.hpp</label>
        <link refid="_call_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>Rules/Factory.hpp</label>
        <link refid="_factory_8hpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype" prot="public">microsoft::quantum::IOperandPrototype</innerclass>
    <innernamespace refid="namespacemicrosoft">microsoft</innernamespace>
    <innernamespace refid="namespacemicrosoft_1_1quantum">microsoft::quantum</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>Microsoft<sp/>Corporation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Llvm/Llvm.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">microsoft</highlight></codeline>
<codeline lineno="11"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">quantum</highlight></codeline>
<codeline lineno="13"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype" kindref="compound">IOperandPrototype</ref></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Instruction<sp/>=<sp/>llvm::Instruction;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>String<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::string;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Value<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>llvm::Value;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Child<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::shared_ptr&lt;IOperandPrototype&gt;;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Children<sp/><sp/><sp/><sp/>=<sp/>std::vector&lt;Child&gt;;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Captures<sp/><sp/><sp/><sp/>=<sp/>std::unordered_map&lt;std::string,<sp/>Value*&gt;;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructors<sp/>and<sp/>destructors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype" kindref="compound">IOperandPrototype</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype" kindref="compound">IOperandPrototype</ref>();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Interface<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a9a4157b4f5b74dff9e5b413a64240236" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a9a4157b4f5b74dff9e5b413a64240236" kindref="member">match</ref>(Value*<sp/>value,<sp/>Captures&amp;<sp/>captures)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a82a0fd5f7297e519eaf8eddac0f38ed3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Child<sp/><ref refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a82a0fd5f7297e519eaf8eddac0f38ed3" kindref="member">copy</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Shared<sp/>functionality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1af998b63b21e8a0500a952248c140d0d0" kindref="member">addChild</ref>(Child<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>child);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a166b955925cb5f1464e20c2b94f91a78" kindref="member">captureAs</ref>(std::string<sp/>capture_name);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Function<sp/>to<sp/>indicate<sp/>match<sp/>success<sp/>or<sp/>failure.<sp/>Either<sp/>of<sp/>these</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>must<sp/>be<sp/>called<sp/>prior<sp/>to<sp/>return<sp/>from<sp/>an<sp/>implementation<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IOperandPrototype::match.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a25043289d7efcbe79db466f49dd51cd2" kindref="member">fail</ref>(Value*<sp/>value,<sp/>Captures&amp;<sp/>captures)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1af9cf2561fc7d6bb39ec9f9486156d133" kindref="member">success</ref>(Value*<sp/>value,<sp/>Captures&amp;<sp/>captures)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Helper<sp/>functions<sp/>for<sp/>the<sp/>capture<sp/>logic.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a98d4e08ac8b7098713c3adc0e3ce1e95" kindref="member">matchChildren</ref>(Value*<sp/>value,<sp/>Captures&amp;<sp/>captures)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Helper<sp/>functions<sp/>for<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a88789e3c997ddbad72a2ad2221652bcc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a88789e3c997ddbad72a2ad2221652bcc" kindref="member">copyPropertiesFrom</ref>(<ref refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype" kindref="compound">IOperandPrototype</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>capture_name_<sp/>=<sp/>other.capture_name_;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>children_<sp/><sp/><sp/><sp/><sp/>=<sp/>other.children_;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>capture(Value*<sp/>value,<sp/>Captures&amp;<sp/>captures)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>uncapture(Value*<sp/>value,<sp/>Captures&amp;<sp/>captures)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Data<sp/>variables<sp/>for<sp/>common<sp/>matching<sp/>functionality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>capture_name_{</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">};<sp/></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Children<sp/><sp/><sp/><sp/>children_{};<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>quantum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>microsoft</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Rules/IOperandPrototype.hpp"/>
  </compounddef>
</doxygen>
