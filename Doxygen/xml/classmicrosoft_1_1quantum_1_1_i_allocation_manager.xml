<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classmicrosoft_1_1quantum_1_1_i_allocation_manager" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>microsoft::quantum::IAllocationManager</compoundname>
    <derivedcompoundref refid="classmicrosoft_1_1quantum_1_1_basic_allocation_manager" prot="public" virt="non-virtual">microsoft::quantum::BasicAllocationManager</derivedcompoundref>
    <includes refid="_i_allocation_manager_8hpp" local="no">AllocationManager/IAllocationManager.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1abf24411fc914344277ef965d27112b18" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using microsoft::quantum::IAllocationManager::Address =  uint64_t</definition>
        <argsstring></argsstring>
        <name>Address</name>
        <briefdescription>
<para>Value type for address. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AllocationManager/IAllocationManager.hpp" line="20" column="9" bodyfile="AllocationManager/IAllocationManager.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1a8b959912df70a013f90086320202f833" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using microsoft::quantum::IAllocationManager::Index =  uint64_t</definition>
        <argsstring></argsstring>
        <name>Index</name>
        <briefdescription>
<para>Index type used to access an array element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AllocationManager/IAllocationManager.hpp" line="21" column="9" bodyfile="AllocationManager/IAllocationManager.hpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1a7c77d7b2d94d3b6a98bb5402a854cca4" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classmicrosoft_1_1quantum_1_1_i_allocation_manager" kindref="compound">IAllocationManager</ref> &gt;</type>
        <definition>using microsoft::quantum::IAllocationManager::AllocationManagerPtr =  std::shared_ptr&lt;IAllocationManager&gt;</definition>
        <argsstring></argsstring>
        <name>AllocationManagerPtr</name>
        <briefdescription>
<para>Pointer interface. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AllocationManager/IAllocationManager.hpp" line="22" column="9" bodyfile="AllocationManager/IAllocationManager.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1a701b23ea261abe369472f06bb5622aaf" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t microsoft::quantum::IAllocationManager::registers_in_use_</definition>
        <argsstring></argsstring>
        <name>registers_in_use_</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Used to track the number of registers in use. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AllocationManager/IAllocationManager.hpp" line="66" column="18" bodyfile="AllocationManager/IAllocationManager.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1a3b015daabc5ca30e78ef3f3489bff9ea" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t microsoft::quantum::IAllocationManager::max_registers_used_</definition>
        <argsstring></argsstring>
        <name>max_registers_used_</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Used to track the max number of registers used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AllocationManager/IAllocationManager.hpp" line="67" column="18" bodyfile="AllocationManager/IAllocationManager.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1afe2f09c01ee0cf4312ba249fba743826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>microsoft::quantum::IAllocationManager::IAllocationManager</definition>
        <argsstring>(IAllocationManager const &amp;)=delete</argsstring>
        <name>IAllocationManager</name>
        <param>
          <type><ref refid="classmicrosoft_1_1quantum_1_1_i_allocation_manager" kindref="compound">IAllocationManager</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AllocationManager/IAllocationManager.hpp" line="26" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1a563e54784aa25d9af5a27d9db84cd4f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>microsoft::quantum::IAllocationManager::IAllocationManager</definition>
        <argsstring>(IAllocationManager &amp;&amp;)=delete</argsstring>
        <name>IAllocationManager</name>
        <param>
          <type><ref refid="classmicrosoft_1_1quantum_1_1_i_allocation_manager" kindref="compound">IAllocationManager</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AllocationManager/IAllocationManager.hpp" line="27" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1a81ca574ab646c14ca8a7995558f3c503" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmicrosoft_1_1quantum_1_1_i_allocation_manager" kindref="compound">IAllocationManager</ref> &amp;</type>
        <definition>IAllocationManager&amp; microsoft::quantum::IAllocationManager::operator=</definition>
        <argsstring>(IAllocationManager const &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classmicrosoft_1_1quantum_1_1_i_allocation_manager" kindref="compound">IAllocationManager</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AllocationManager/IAllocationManager.hpp" line="28" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1a86f9df1c929eec9cff34ad6ae2e96a90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmicrosoft_1_1quantum_1_1_i_allocation_manager" kindref="compound">IAllocationManager</ref> &amp;</type>
        <definition>IAllocationManager&amp; microsoft::quantum::IAllocationManager::operator=</definition>
        <argsstring>(IAllocationManager &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classmicrosoft_1_1quantum_1_1_i_allocation_manager" kindref="compound">IAllocationManager</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AllocationManager/IAllocationManager.hpp" line="29" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1af0c9a4cf370d3d2bd7932c3af24b8584" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>microsoft::quantum::IAllocationManager::~IAllocationManager</definition>
        <argsstring>()</argsstring>
        <name>~IAllocationManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AllocationManager/IAllocationManager.hpp" line="31" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1a0477e1fd52989e76d877dc7329f7ce3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1abf24411fc914344277ef965d27112b18" kindref="member">Address</ref></type>
        <definition>virtual Address microsoft::quantum::IAllocationManager::allocate</definition>
        <argsstring>(String const &amp;name=&quot;&quot;, Index const &amp;count=1)=0</argsstring>
        <name>allocate</name>
        <reimplementedby refid="classmicrosoft_1_1quantum_1_1_basic_allocation_manager_1aa6eff65c005184b4f42402c4d10abf0e">allocate</reimplementedby>
        <param>
          <type>String const &amp;</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type><ref refid="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1a8b959912df70a013f90086320202f833" kindref="member">Index</ref> const &amp;</type>
          <declname>count</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Abstract member function to allocate an element or sequence of elements. The developer should not assume continuity of the address segment as this is not guaranteed. Note this function may throw if allocation is not possible. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AllocationManager/IAllocationManager.hpp" line="39" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1a0fcd1d870506fb163d70c63cc865cb06" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void microsoft::quantum::IAllocationManager::release</definition>
        <argsstring>(Address const &amp;address)=0</argsstring>
        <name>release</name>
        <reimplementedby refid="classmicrosoft_1_1quantum_1_1_basic_allocation_manager_1a11c187cae2ab95bb7455b8cbba5ec31a">release</reimplementedby>
        <param>
          <type><ref refid="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1abf24411fc914344277ef965d27112b18" kindref="member">Address</ref> const &amp;</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Abstract member function to release a previously allocated function. Note this function may throw if an invalid address is passed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AllocationManager/IAllocationManager.hpp" line="43" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1ae53a2911903febc00fb6a9139ef247af" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void microsoft::quantum::IAllocationManager::reset</definition>
        <argsstring>()=0</argsstring>
        <name>reset</name>
        <reimplementedby refid="classmicrosoft_1_1quantum_1_1_basic_allocation_manager_1a264bece62aef1a34fd44f9a31a4cc1f7">reset</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Abstract member function to reset the allocation manager. This function clears all allocations and resets all statistics. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AllocationManager/IAllocationManager.hpp" line="47" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1a7c2530c73296df6cf87ff54dc9c6509c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t microsoft::quantum::IAllocationManager::allocationsInUse</definition>
        <argsstring>() const</argsstring>
        <name>allocationsInUse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Current number of registers in use. This function is used to inquire about the current number registers/resources in use. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AllocationManager/IAllocationManager.hpp" line="54" column="18" bodyfile="AllocationManager/IAllocationManager.cpp" bodystart="13" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1a6b70408d5752024218c5dbc7cc88a2b1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t microsoft::quantum::IAllocationManager::maxAllocationsUsed</definition>
        <argsstring>() const</argsstring>
        <name>maxAllocationsUsed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum number of registers in use at any one time. The maximum number of registers used at any one time. As an example of usage, this function is useful to calculate the total number of qubits required to execute the entry function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AllocationManager/IAllocationManager.hpp" line="59" column="18" bodyfile="AllocationManager/IAllocationManager.cpp" bodystart="18" bodyend="21"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1a7e7355f5d220774b4ac4b93227f1c215" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>microsoft::quantum::IAllocationManager::IAllocationManager</definition>
        <argsstring>()=default</argsstring>
        <name>IAllocationManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AllocationManager/IAllocationManager.hpp" line="62" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1ac135ced7582a21cdb00ab4704f78c988" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void microsoft::quantum::IAllocationManager::updateRegistersInUse</definition>
        <argsstring>(uint64_t n)</argsstring>
        <name>updateRegistersInUse</name>
        <param>
          <type>uint64_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AllocationManager/IAllocationManager.hpp" line="63" column="14" bodyfile="AllocationManager/IAllocationManager.cpp" bodystart="23" bodyend="30"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Interface class for allocation management. This interface provides means to allocate and release statically allocated resources such as qubits and results. In a future version, it may be extended with get and store in order to support Arrays and Tuples. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>microsoft::quantum::BasicAllocationManager</label>
        <link refid="classmicrosoft_1_1quantum_1_1_basic_allocation_manager"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>microsoft::quantum::IAllocationManager</label>
        <link refid="classmicrosoft_1_1quantum_1_1_i_allocation_manager"/>
      </node>
    </inheritancegraph>
    <location file="AllocationManager/IAllocationManager.hpp" line="17" column="5" bodyfile="AllocationManager/IAllocationManager.hpp" bodystart="18" bodyend="68"/>
    <listofallmembers>
      <member refid="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1abf24411fc914344277ef965d27112b18" prot="public" virt="non-virtual"><scope>microsoft::quantum::IAllocationManager</scope><name>Address</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1a0477e1fd52989e76d877dc7329f7ce3d" prot="public" virt="pure-virtual"><scope>microsoft::quantum::IAllocationManager</scope><name>allocate</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1a7c77d7b2d94d3b6a98bb5402a854cca4" prot="public" virt="non-virtual"><scope>microsoft::quantum::IAllocationManager</scope><name>AllocationManagerPtr</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1a7c2530c73296df6cf87ff54dc9c6509c" prot="public" virt="non-virtual"><scope>microsoft::quantum::IAllocationManager</scope><name>allocationsInUse</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1afe2f09c01ee0cf4312ba249fba743826" prot="public" virt="non-virtual"><scope>microsoft::quantum::IAllocationManager</scope><name>IAllocationManager</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1a563e54784aa25d9af5a27d9db84cd4f5" prot="public" virt="non-virtual"><scope>microsoft::quantum::IAllocationManager</scope><name>IAllocationManager</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1a7e7355f5d220774b4ac4b93227f1c215" prot="protected" virt="non-virtual"><scope>microsoft::quantum::IAllocationManager</scope><name>IAllocationManager</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1a8b959912df70a013f90086320202f833" prot="public" virt="non-virtual"><scope>microsoft::quantum::IAllocationManager</scope><name>Index</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1a3b015daabc5ca30e78ef3f3489bff9ea" prot="private" virt="non-virtual"><scope>microsoft::quantum::IAllocationManager</scope><name>max_registers_used_</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1a6b70408d5752024218c5dbc7cc88a2b1" prot="public" virt="non-virtual"><scope>microsoft::quantum::IAllocationManager</scope><name>maxAllocationsUsed</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1a81ca574ab646c14ca8a7995558f3c503" prot="public" virt="non-virtual"><scope>microsoft::quantum::IAllocationManager</scope><name>operator=</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1a86f9df1c929eec9cff34ad6ae2e96a90" prot="public" virt="non-virtual"><scope>microsoft::quantum::IAllocationManager</scope><name>operator=</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1a701b23ea261abe369472f06bb5622aaf" prot="private" virt="non-virtual"><scope>microsoft::quantum::IAllocationManager</scope><name>registers_in_use_</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1a0fcd1d870506fb163d70c63cc865cb06" prot="public" virt="pure-virtual"><scope>microsoft::quantum::IAllocationManager</scope><name>release</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1ae53a2911903febc00fb6a9139ef247af" prot="public" virt="pure-virtual"><scope>microsoft::quantum::IAllocationManager</scope><name>reset</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1ac135ced7582a21cdb00ab4704f78c988" prot="protected" virt="non-virtual"><scope>microsoft::quantum::IAllocationManager</scope><name>updateRegistersInUse</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1af0c9a4cf370d3d2bd7932c3af24b8584" prot="public" virt="virtual"><scope>microsoft::quantum::IAllocationManager</scope><name>~IAllocationManager</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
