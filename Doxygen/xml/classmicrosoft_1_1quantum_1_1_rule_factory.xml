<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classmicrosoft_1_1quantum_1_1_rule_factory" kind="class" language="C++" prot="public">
    <compoundname>microsoft::quantum::RuleFactory</compoundname>
    <includes refid="_factory_8hpp" local="no">Rules/Factory.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classmicrosoft_1_1quantum_1_1_rule_factory_1a327402fcfe90837fb0efb5fc14153986" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classmicrosoft_1_1quantum_1_1_replacement_rule" kindref="compound">ReplacementRule</ref> &gt;</type>
        <definition>using microsoft::quantum::RuleFactory::ReplacementRulePtr =  std::shared_ptr&lt;ReplacementRule&gt;</definition>
        <argsstring></argsstring>
        <name>ReplacementRulePtr</name>
        <briefdescription>
<para><ref refid="classmicrosoft_1_1quantum_1_1_replacement_rule" kindref="compound">ReplacementRule</ref> pointer type used for the construction of replacement rules. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/Factory.hpp" line="27" column="9" bodyfile="Rules/Factory.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmicrosoft_1_1quantum_1_1_rule_factory_1a65db113bde77cbc5cb163bb7f53263a1" prot="public" static="no">
        <type><ref refid="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1a7c77d7b2d94d3b6a98bb5402a854cca4" kindref="member">IAllocationManager::AllocationManagerPtr</ref></type>
        <definition>using microsoft::quantum::RuleFactory::AllocationManagerPtr =  IAllocationManager::AllocationManagerPtr</definition>
        <argsstring></argsstring>
        <name>AllocationManagerPtr</name>
        <briefdescription>
<para>Allocation manager pointer used to hold allocation managers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/Factory.hpp" line="30" column="9" bodyfile="Rules/Factory.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmicrosoft_1_1quantum_1_1_rule_factory_1a1359a09d4c22413fd6d6b1b8f6f04630" prot="private" static="no" mutable="no">
        <type><ref refid="classmicrosoft_1_1quantum_1_1_rule_set" kindref="compound">RuleSet</ref> &amp;</type>
        <definition>RuleSet&amp; microsoft::quantum::RuleFactory::rule_set_</definition>
        <argsstring></argsstring>
        <name>rule_set_</name>
        <briefdescription>
<para>The rule set we are building. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/Factory.hpp" line="180" column="17" bodyfile="Rules/Factory.hpp" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmicrosoft_1_1quantum_1_1_rule_factory_1a687bce86ccb7d7152742e913317fd953" prot="private" static="no" mutable="no">
        <type><ref refid="classmicrosoft_1_1quantum_1_1_rule_factory_1a65db113bde77cbc5cb163bb7f53263a1" kindref="member">AllocationManagerPtr</ref></type>
        <definition>AllocationManagerPtr microsoft::quantum::RuleFactory::qubit_alloc_manager_</definition>
        <argsstring></argsstring>
        <name>qubit_alloc_manager_</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
<para>Qubit allocation manager which is used in the case of static qubit allocation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/Factory.hpp" line="186" column="30" bodyfile="Rules/Factory.hpp" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmicrosoft_1_1quantum_1_1_rule_factory_1a7904c8dd039dec01a2c32f08722835a2" prot="private" static="no" mutable="no">
        <type><ref refid="classmicrosoft_1_1quantum_1_1_rule_factory_1a65db113bde77cbc5cb163bb7f53263a1" kindref="member">AllocationManagerPtr</ref></type>
        <definition>AllocationManagerPtr microsoft::quantum::RuleFactory::result_alloc_manager_</definition>
        <argsstring></argsstring>
        <name>result_alloc_manager_</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
<para>Result allocation manager which is used in the case of static results allocation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/Factory.hpp" line="189" column="30" bodyfile="Rules/Factory.hpp" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmicrosoft_1_1quantum_1_1_rule_factory_1ae95869683adb8c77f88118bd483be2c6" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t microsoft::quantum::RuleFactory::default_integer_width_</definition>
        <argsstring></argsstring>
        <name>default_integer_width_</name>
        <initializer>{64}</initializer>
        <briefdescription>
<para>Configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>The default integer width. This value is used whenever the width within the context cannot be inferred. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/Factory.hpp" line="196" column="18" bodyfile="Rules/Factory.hpp" bodystart="196" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_rule_factory_1adda40e9c4d6efd68793c81c13381296e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>microsoft::quantum::RuleFactory::RuleFactory</definition>
        <argsstring>(RuleSet &amp;rule_set, AllocationManagerPtr qubit_alloc_manager, AllocationManagerPtr result_alloc_manager)</argsstring>
        <name>RuleFactory</name>
        <param>
          <type><ref refid="classmicrosoft_1_1quantum_1_1_rule_set" kindref="compound">RuleSet</ref> &amp;</type>
          <declname>rule_set</declname>
        </param>
        <param>
          <type><ref refid="classmicrosoft_1_1quantum_1_1_rule_factory_1a65db113bde77cbc5cb163bb7f53263a1" kindref="member">AllocationManagerPtr</ref></type>
          <declname>qubit_alloc_manager</declname>
        </param>
        <param>
          <type><ref refid="classmicrosoft_1_1quantum_1_1_rule_factory_1a65db113bde77cbc5cb163bb7f53263a1" kindref="member">AllocationManagerPtr</ref></type>
          <declname>result_alloc_manager</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/Factory.hpp" line="37" column="9" bodyfile="Rules/Factory.cpp" bodystart="26" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_rule_factory_1a37d0ae9c05e1e0c3e430c16f4559f549" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>microsoft::quantum::RuleFactory::RuleFactory</definition>
        <argsstring>()=delete</argsstring>
        <name>RuleFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/Factory.hpp" line="41" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_rule_factory_1acd0c174d59ce9be84969b73381b59c64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>microsoft::quantum::RuleFactory::RuleFactory</definition>
        <argsstring>(RuleFactory const &amp;)=delete</argsstring>
        <name>RuleFactory</name>
        <param>
          <type><ref refid="classmicrosoft_1_1quantum_1_1_rule_factory" kindref="compound">RuleFactory</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/Factory.hpp" line="42" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_rule_factory_1a6de741f9ddda4c082f701c42cc8913a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>microsoft::quantum::RuleFactory::RuleFactory</definition>
        <argsstring>(RuleFactory &amp;&amp;)=default</argsstring>
        <name>RuleFactory</name>
        <param>
          <type><ref refid="classmicrosoft_1_1quantum_1_1_rule_factory" kindref="compound">RuleFactory</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/Factory.hpp" line="43" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_rule_factory_1a4bd75ddd6e9fbf275bb0f1b43d16194b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>microsoft::quantum::RuleFactory::~RuleFactory</definition>
        <argsstring>()=default</argsstring>
        <name>~RuleFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/Factory.hpp" line="44" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_rule_factory_1a64de24c930b2959d93e93d2055b7473e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void microsoft::quantum::RuleFactory::usingConfiguration</definition>
        <argsstring>(FactoryConfiguration const &amp;config)</argsstring>
        <name>usingConfiguration</name>
        <param>
          <type><ref refid="classmicrosoft_1_1quantum_1_1_factory_configuration" kindref="compound">FactoryConfiguration</ref> const &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>This takes a <ref refid="classmicrosoft_1_1quantum_1_1_factory_configuration" kindref="compound">FactoryConfiguration</ref> as argument and enable rules accordingly. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/Factory.hpp" line="50" column="14" bodyfile="Rules/Factory.cpp" bodystart="36" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_rule_factory_1a562f68309c4687105898a2085838fd0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void microsoft::quantum::RuleFactory::removeFunctionCall</definition>
        <argsstring>(String const &amp;name)</argsstring>
        <name>removeFunctionCall</name>
        <param>
          <type>String const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes all calls to functions with a specified name. This function matches on name alone and ignores function arguments. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/Factory.hpp" line="58" column="14" bodyfile="Rules/Factory.cpp" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_rule_factory_1a1df0940ef8c5733f06ce28299708f587" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void microsoft::quantum::RuleFactory::useStaticQubitArrayAllocation</definition>
        <argsstring>()</argsstring>
        <name>useStaticQubitArrayAllocation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Static qubit array allocation identifies allocations, array access and releases. Each of these are replaced with static values. Patterns recognised include</para>
<para><programlisting><codeline><highlight class="normal">%array<sp/>=<sp/>call<sp/>%Array*<sp/>@__quantum__rt__qubit_allocate_array(i64<sp/>10)</highlight></codeline>
</programlisting></para>
<para>which is replaced by a constant pointer</para>
<para><programlisting><codeline><highlight class="normal">%array<sp/>=<sp/>inttoptr<sp/>i64<sp/>0<sp/>to<sp/>%Array*</highlight></codeline>
</programlisting></para>
<para>The array allocation is managed through the qubit allocation manager. Access to qubit arrays</para>
<para><programlisting><codeline><highlight class="normal">%0<sp/>=<sp/>call<sp/>i8*<sp/>@__quantum__rt__array_get_element_ptr_1d(%Array*<sp/>%array,<sp/>i64<sp/>7)</highlight></codeline>
<codeline><highlight class="normal">%1<sp/>=<sp/>bitcast<sp/>i8*<sp/>%0<sp/>to<sp/>%Qubit**</highlight></codeline>
<codeline><highlight class="normal">%qubit<sp/>=<sp/>load<sp/>%Qubit*,<sp/>%Qubit**<sp/>%1,<sp/>align<sp/>8</highlight></codeline>
</programlisting></para>
<para>is replaced by off-setting the array value by 7 to get</para>
<para><programlisting><codeline><highlight class="normal">%qubit<sp/>=<sp/>inttoptr<sp/>i64<sp/>7<sp/>to<sp/>%Qubit*</highlight></codeline>
</programlisting></para>
<para>Finally, release is recognised and the allocation manager is invoked accordingly. </para>
        </detaileddescription>
        <inbodydescription>
<para>Allocation</para>
<para>This rule is replacing the allocate qubit array instruction</para>
<para>leftPreshared = call Array* @__quantum__rt__qubit_allocate_array(i64 2)</para>
<para>by changing it to a constant pointer</para>
<para>leftPreshared = inttoptr i64 0 to Array*</para>
<para>In this way, we use the</para>
<para>Array access replacement</para>
<para>Release replacement</para>
        </inbodydescription>
        <location file="Rules/Factory.hpp" line="91" column="14" bodyfile="Rules/Factory.cpp" bodystart="127" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_rule_factory_1a8c32ae37eba8ae340e1817b27efcf66a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void microsoft::quantum::RuleFactory::useStaticQubitAllocation</definition>
        <argsstring>()</argsstring>
        <name>useStaticQubitAllocation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Static qubit allocation identifies allocation and release of single qubits. It uses the qubit allocation manager to track allocation and releases of qubits. It translates</para>
<para><programlisting><codeline><highlight class="normal">%qubit1<sp/>=<sp/>call<sp/>%Qubit*<sp/>@__quantum__rt__qubit_allocate()</highlight></codeline>
<codeline><highlight class="normal">%qubit2<sp/>=<sp/>call<sp/>%Qubit*<sp/>@__quantum__rt__qubit_allocate()</highlight></codeline>
<codeline><highlight class="normal">%qubit3<sp/>=<sp/>call<sp/>%Qubit*<sp/>@__quantum__rt__qubit_allocate()</highlight></codeline>
<codeline><highlight class="normal">%qubit4<sp/>=<sp/>call<sp/>%Qubit*<sp/>@__quantum__rt__qubit_allocate()</highlight></codeline>
<codeline><highlight class="normal">%qubit5<sp/>=<sp/>call<sp/>%Qubit*<sp/>@__quantum__rt__qubit_allocate()</highlight></codeline>
</programlisting></para>
<para>to</para>
<para><programlisting><codeline><highlight class="normal">%qubit1<sp/>=<sp/>inttoptr<sp/>i64<sp/>0<sp/>to<sp/>%Qubit*</highlight></codeline>
<codeline><highlight class="normal">%qubit2<sp/>=<sp/>inttoptr<sp/>i64<sp/>1<sp/>to<sp/>%Qubit*</highlight></codeline>
<codeline><highlight class="normal">%qubit3<sp/>=<sp/>inttoptr<sp/>i64<sp/>2<sp/>to<sp/>%Qubit*</highlight></codeline>
<codeline><highlight class="normal">%qubit4<sp/>=<sp/>inttoptr<sp/>i64<sp/>3<sp/>to<sp/>%Qubit*</highlight></codeline>
<codeline><highlight class="normal">%qubit5<sp/>=<sp/>inttoptr<sp/>i64<sp/>4<sp/>to<sp/>%Qubit*</highlight></codeline>
</programlisting> if the <ref refid="classmicrosoft_1_1quantum_1_1_basic_allocation_manager" kindref="compound">BasicAllocationManager</ref> is used. </para>
        </detaileddescription>
        <inbodydescription>
<para>Release replacement</para>
        </inbodydescription>
        <location file="Rules/Factory.hpp" line="114" column="14" bodyfile="Rules/Factory.cpp" bodystart="275" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_rule_factory_1a4e0f22992717e3fd8303e5035e4e6d9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void microsoft::quantum::RuleFactory::useStaticResultAllocation</definition>
        <argsstring>()</argsstring>
        <name>useStaticResultAllocation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Static allocation of results. This feature is similar to <computeroutput>useStaticQubitAllocation</computeroutput> but uses the result allocation manager. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/Factory.hpp" line="118" column="14" bodyfile="Rules/Factory.cpp" bodystart="390" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_rule_factory_1afa8a50b1614a3de7d396e5f5c94764ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void microsoft::quantum::RuleFactory::resolveConstantArraySizes</definition>
        <argsstring>()</argsstring>
        <name>resolveConstantArraySizes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Array access replacement</para>
        </inbodydescription>
        <location file="Rules/Factory.hpp" line="120" column="14" bodyfile="Rules/Factory.cpp" bodystart="86" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_rule_factory_1a3bbef0bbe40c078c2087506e5a246a2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void microsoft::quantum::RuleFactory::inlineCallables</definition>
        <argsstring>()</argsstring>
        <name>inlineCallables</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Array access replacement</para>
        </inbodydescription>
        <location file="Rules/Factory.hpp" line="122" column="14" bodyfile="Rules/Factory.cpp" bodystart="111" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_rule_factory_1a3f73c72f050c1206d22cfa001401e029" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void microsoft::quantum::RuleFactory::optimiseResultOne</definition>
        <argsstring>()</argsstring>
        <name>optimiseResultOne</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replaces branching of quantum results compared to one. This is a relatively advanced pattern, intended for base profile-like constructs where</para>
<para><programlisting><codeline><highlight class="normal">%1<sp/>=<sp/>tail<sp/>call<sp/>%Result*<sp/>@__quantum__rt__result_get_one()</highlight></codeline>
<codeline><highlight class="normal">%2<sp/>=<sp/>tail<sp/>call<sp/>i1<sp/>@__quantum__rt__result_equal(%Result*<sp/>%0,<sp/>%Result*<sp/>%1)</highlight></codeline>
<codeline><highlight class="normal">br<sp/>i1<sp/>%2,<sp/>label<sp/>%then0__1,<sp/>label<sp/>%continue__1</highlight></codeline>
</programlisting></para>
<para>is mapped into</para>
<para><programlisting><codeline><highlight class="normal">%1<sp/>=<sp/>call<sp/>i1<sp/>@__quantum__qis__read_result__body(%Result*<sp/>%0)</highlight></codeline>
<codeline><highlight class="normal">br<sp/>i1<sp/>%1,<sp/>label<sp/>%then0__1,<sp/>label<sp/>%continue__1</highlight></codeline>
</programlisting></para>
<para>which removes the need for constant one. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/Factory.hpp" line="144" column="14" bodyfile="Rules/Factory.cpp" bodystart="548" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_rule_factory_1a6f0f64631dbcdf7b4e65debe57c8edaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void microsoft::quantum::RuleFactory::optimiseResultZero</definition>
        <argsstring>()</argsstring>
        <name>optimiseResultZero</name>
        <briefdescription>
<para>Replaces branching of quantum results compared to zero. This method is not implemented yet. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/Factory.hpp" line="147" column="14" bodyfile="Rules/Factory.cpp" bodystart="475" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_rule_factory_1ad235feb32d4c66d5ca304399e3fb35fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void microsoft::quantum::RuleFactory::disableReferenceCounting</definition>
        <argsstring>()</argsstring>
        <name>disableReferenceCounting</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method disables reference counting for arrays, strings and results. It does so by simply removing the instructions and the resulting code is expected to be executed either on a stack VM or with shared pointer logic. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/Factory.hpp" line="155" column="14" bodyfile="Rules/Factory.cpp" bodystart="619" bodyend="624"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_rule_factory_1af9f7a6296e7912c8a6ab5fc7ad3890c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void microsoft::quantum::RuleFactory::disableAliasCounting</definition>
        <argsstring>()</argsstring>
        <name>disableAliasCounting</name>
        <briefdescription>
<para>This method disables alias counting for arrays, strings and results. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/Factory.hpp" line="158" column="14" bodyfile="Rules/Factory.cpp" bodystart="626" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_rule_factory_1a7f80b73c026d75b58349dd9aef93ef71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void microsoft::quantum::RuleFactory::disableStringSupport</definition>
        <argsstring>()</argsstring>
        <name>disableStringSupport</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes string support by removing string related instructions. At the moment these include <computeroutput>__quantum__rt__string_create</computeroutput>, <computeroutput>__quantum__rt__string_update_reference_count</computeroutput>, <computeroutput>__quantum__rt__string_update_alias_count</computeroutput> and <computeroutput>__quantum__rt__message</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/Factory.hpp" line="164" column="14" bodyfile="Rules/Factory.cpp" bodystart="633" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_rule_factory_1ada0ef5df9369d8622758648742a137f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void microsoft::quantum::RuleFactory::setDefaultIntegerWidth</definition>
        <argsstring>(uint32_t v)</argsstring>
        <name>setDefaultIntegerWidth</name>
        <param>
          <type>uint32_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Sets the integer width used when it cannot be deducted from the context of the transformation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/Factory.hpp" line="170" column="14" bodyfile="Rules/Factory.cpp" bodystart="665" bodyend="668"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_rule_factory_1af8b176b89e15be0b14053d056ff735b2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmicrosoft_1_1quantum_1_1_rule_factory_1a327402fcfe90837fb0efb5fc14153986" kindref="member">ReplacementRulePtr</ref></type>
        <definition>ReplacementRulePtr microsoft::quantum::RuleFactory::addRule</definition>
        <argsstring>(ReplacementRule &amp;&amp;rule)</argsstring>
        <name>addRule</name>
        <param>
          <type><ref refid="classmicrosoft_1_1quantum_1_1_replacement_rule" kindref="compound">ReplacementRule</ref> &amp;&amp;</type>
          <declname>rule</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper function that moves a replacement rule into a shared pointer, adds it to the rule set and returns a copy of it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/Factory.hpp" line="175" column="28" bodyfile="Rules/Factory.cpp" bodystart="656" bodyend="663"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Rule factory provides a high-level methods to build a rule set that enforces certain aspects of QIR transformation. </para>
    </detaileddescription>
    <location file="Rules/Factory.hpp" line="23" column="5" bodyfile="Rules/Factory.hpp" bodystart="24" bodyend="197"/>
    <listofallmembers>
      <member refid="classmicrosoft_1_1quantum_1_1_rule_factory_1af8b176b89e15be0b14053d056ff735b2" prot="private" virt="non-virtual"><scope>microsoft::quantum::RuleFactory</scope><name>addRule</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_rule_factory_1a65db113bde77cbc5cb163bb7f53263a1" prot="public" virt="non-virtual"><scope>microsoft::quantum::RuleFactory</scope><name>AllocationManagerPtr</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_rule_factory_1ae95869683adb8c77f88118bd483be2c6" prot="private" virt="non-virtual"><scope>microsoft::quantum::RuleFactory</scope><name>default_integer_width_</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_rule_factory_1af9f7a6296e7912c8a6ab5fc7ad3890c8" prot="public" virt="non-virtual"><scope>microsoft::quantum::RuleFactory</scope><name>disableAliasCounting</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_rule_factory_1ad235feb32d4c66d5ca304399e3fb35fb" prot="public" virt="non-virtual"><scope>microsoft::quantum::RuleFactory</scope><name>disableReferenceCounting</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_rule_factory_1a7f80b73c026d75b58349dd9aef93ef71" prot="public" virt="non-virtual"><scope>microsoft::quantum::RuleFactory</scope><name>disableStringSupport</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_rule_factory_1a3bbef0bbe40c078c2087506e5a246a2f" prot="public" virt="non-virtual"><scope>microsoft::quantum::RuleFactory</scope><name>inlineCallables</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_rule_factory_1a3f73c72f050c1206d22cfa001401e029" prot="public" virt="non-virtual"><scope>microsoft::quantum::RuleFactory</scope><name>optimiseResultOne</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_rule_factory_1a6f0f64631dbcdf7b4e65debe57c8edaa" prot="public" virt="non-virtual"><scope>microsoft::quantum::RuleFactory</scope><name>optimiseResultZero</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_rule_factory_1a687bce86ccb7d7152742e913317fd953" prot="private" virt="non-virtual"><scope>microsoft::quantum::RuleFactory</scope><name>qubit_alloc_manager_</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_rule_factory_1a562f68309c4687105898a2085838fd0f" prot="public" virt="non-virtual"><scope>microsoft::quantum::RuleFactory</scope><name>removeFunctionCall</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_rule_factory_1a327402fcfe90837fb0efb5fc14153986" prot="public" virt="non-virtual"><scope>microsoft::quantum::RuleFactory</scope><name>ReplacementRulePtr</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_rule_factory_1afa8a50b1614a3de7d396e5f5c94764ee" prot="public" virt="non-virtual"><scope>microsoft::quantum::RuleFactory</scope><name>resolveConstantArraySizes</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_rule_factory_1a7904c8dd039dec01a2c32f08722835a2" prot="private" virt="non-virtual"><scope>microsoft::quantum::RuleFactory</scope><name>result_alloc_manager_</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_rule_factory_1a1359a09d4c22413fd6d6b1b8f6f04630" prot="private" virt="non-virtual"><scope>microsoft::quantum::RuleFactory</scope><name>rule_set_</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_rule_factory_1adda40e9c4d6efd68793c81c13381296e" prot="public" virt="non-virtual"><scope>microsoft::quantum::RuleFactory</scope><name>RuleFactory</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_rule_factory_1a37d0ae9c05e1e0c3e430c16f4559f549" prot="public" virt="non-virtual"><scope>microsoft::quantum::RuleFactory</scope><name>RuleFactory</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_rule_factory_1acd0c174d59ce9be84969b73381b59c64" prot="public" virt="non-virtual"><scope>microsoft::quantum::RuleFactory</scope><name>RuleFactory</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_rule_factory_1a6de741f9ddda4c082f701c42cc8913a6" prot="public" virt="non-virtual"><scope>microsoft::quantum::RuleFactory</scope><name>RuleFactory</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_rule_factory_1ada0ef5df9369d8622758648742a137f5" prot="public" virt="non-virtual"><scope>microsoft::quantum::RuleFactory</scope><name>setDefaultIntegerWidth</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_rule_factory_1a8c32ae37eba8ae340e1817b27efcf66a" prot="public" virt="non-virtual"><scope>microsoft::quantum::RuleFactory</scope><name>useStaticQubitAllocation</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_rule_factory_1a1df0940ef8c5733f06ce28299708f587" prot="public" virt="non-virtual"><scope>microsoft::quantum::RuleFactory</scope><name>useStaticQubitArrayAllocation</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_rule_factory_1a4e0f22992717e3fd8303e5035e4e6d9f" prot="public" virt="non-virtual"><scope>microsoft::quantum::RuleFactory</scope><name>useStaticResultAllocation</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_rule_factory_1a64de24c930b2959d93e93d2055b7473e" prot="public" virt="non-virtual"><scope>microsoft::quantum::RuleFactory</scope><name>usingConfiguration</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_rule_factory_1a4bd75ddd6e9fbf275bb0f1b43d16194b" prot="public" virt="non-virtual"><scope>microsoft::quantum::RuleFactory</scope><name>~RuleFactory</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
