<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass" kind="class" language="C++" prot="public">
    <compoundname>microsoft::quantum::TransformationRulesPass</compoundname>
    <basecompoundref prot="public" virt="non-virtual">llvm::PassInfoMixin&lt; TransformationRulesPass &gt;</basecompoundref>
    <includes refid="_transformation_rules_pass_8hpp" local="no">TransformationRulesPass/TransformationRulesPass.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1af0a45129ba9202ac90347601f719134f" prot="public" static="no">
        <type><ref refid="classmicrosoft_1_1quantum_1_1_replacement_rule_1aca9c759c6f4aace29dc3b0b3b05ce9e1" kindref="member">ReplacementRule::Replacements</ref></type>
        <definition>using microsoft::quantum::TransformationRulesPass::Replacements =  ReplacementRule::Replacements</definition>
        <argsstring></argsstring>
        <name>Replacements</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="64" column="9" bodyfile="TransformationRulesPass/TransformationRulesPass.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a5b814f3af3684d6b66f405b516d33981" prot="public" static="no">
        <type>llvm::Instruction</type>
        <definition>using microsoft::quantum::TransformationRulesPass::Instruction =  llvm::Instruction</definition>
        <argsstring></argsstring>
        <name>Instruction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="65" column="9" bodyfile="TransformationRulesPass/TransformationRulesPass.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1abf8768343b0fa26c376f2098a313a4ee" prot="public" static="no">
        <type>std::vector&lt; <ref refid="classmicrosoft_1_1quantum_1_1_replacement_rule" kindref="compound">ReplacementRule</ref> &gt;</type>
        <definition>using microsoft::quantum::TransformationRulesPass::Rules =  std::vector&lt;ReplacementRule&gt;</definition>
        <argsstring></argsstring>
        <name>Rules</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="66" column="9" bodyfile="TransformationRulesPass/TransformationRulesPass.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a7507d540699f7033bcb6aeb37a0a1755" prot="public" static="no">
        <type>llvm::Value</type>
        <definition>using microsoft::quantum::TransformationRulesPass::Value =  llvm::Value</definition>
        <argsstring></argsstring>
        <name>Value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="67" column="9" bodyfile="TransformationRulesPass/TransformationRulesPass.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a8dc84138fb75565886b7f8c586827be5" prot="public" static="no">
        <type><ref refid="classmicrosoft_1_1quantum_1_1_replacement_rule_1ab975e38f598fc4e3a84039f84ab404d1" kindref="member">ReplacementRule::Builder</ref></type>
        <definition>using microsoft::quantum::TransformationRulesPass::Builder =  ReplacementRule::Builder</definition>
        <argsstring></argsstring>
        <name>Builder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="68" column="9" bodyfile="TransformationRulesPass/TransformationRulesPass.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a0b426f8ca398834a0904d11e182d810d" prot="public" static="no">
        <type><ref refid="classmicrosoft_1_1quantum_1_1_i_allocation_manager_1a7c77d7b2d94d3b6a98bb5402a854cca4" kindref="member">IAllocationManager::AllocationManagerPtr</ref></type>
        <definition>using microsoft::quantum::TransformationRulesPass::AllocationManagerPtr =  IAllocationManager::AllocationManagerPtr</definition>
        <argsstring></argsstring>
        <name>AllocationManagerPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="69" column="9" bodyfile="TransformationRulesPass/TransformationRulesPass.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a529fcc11a8a71893a98d5a967c400016" prot="public" static="no">
        <type>RuleSet::Captures</type>
        <definition>using microsoft::quantum::TransformationRulesPass::Captures =  RuleSet::Captures</definition>
        <argsstring></argsstring>
        <name>Captures</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="70" column="9" bodyfile="TransformationRulesPass/TransformationRulesPass.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a07ac388be0bc998c320576e5c659ff91" prot="public" static="no">
        <type>std::unordered_map&lt; std::string, llvm::ConstantInt * &gt;</type>
        <definition>using microsoft::quantum::TransformationRulesPass::ConstantArguments =  std::unordered_map&lt;std::string, llvm::ConstantInt*&gt;</definition>
        <argsstring></argsstring>
        <name>ConstantArguments</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="71" column="9" bodyfile="TransformationRulesPass/TransformationRulesPass.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1ab1bf7939cea62871c46f2831c7d4bd08" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classmicrosoft_1_1quantum_1_1_i_logger" kindref="compound">ILogger</ref> &gt;</type>
        <definition>using microsoft::quantum::TransformationRulesPass::ILoggerPtr =  std::shared_ptr&lt;ILogger&gt;</definition>
        <argsstring></argsstring>
        <name>ILoggerPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="72" column="9" bodyfile="TransformationRulesPass/TransformationRulesPass.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a96436bab68086f9477de7cb38a7ba6d2" prot="public" static="no">
        <type>std::vector&lt; llvm::Instruction * &gt;</type>
        <definition>using microsoft::quantum::TransformationRulesPass::DeletableInstructions =  std::vector&lt;llvm::Instruction*&gt;</definition>
        <argsstring></argsstring>
        <name>DeletableInstructions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="105" column="9" bodyfile="TransformationRulesPass/TransformationRulesPass.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a5c02846dcce74acafbecaebab953224f" prot="public" static="no">
        <type>std::function&lt; llvm::Value *(llvm::Value *, DeletableInstructions &amp;)&gt;</type>
        <definition>using microsoft::quantum::TransformationRulesPass::InstructionModifier =  std::function&lt;llvm::Value*(llvm::Value*, DeletableInstructions&amp;)&gt;</definition>
        <argsstring></argsstring>
        <name>InstructionModifier</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="106" column="9" bodyfile="TransformationRulesPass/TransformationRulesPass.hpp" bodystart="106" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a5d02953429b53ef034e3872538cc2df2" prot="private" static="no" mutable="no">
        <type><ref refid="classmicrosoft_1_1quantum_1_1_rule_set" kindref="compound">RuleSet</ref></type>
        <definition>RuleSet microsoft::quantum::TransformationRulesPass::rule_set_</definition>
        <argsstring></argsstring>
        <name>rule_set_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Rule set which describes a set of transformations to apply to the QIR. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="183" column="17" bodyfile="TransformationRulesPass/TransformationRulesPass.hpp" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1aa3102df33b8b3f21826ebd6fb90856cc" prot="private" static="no" mutable="no">
        <type><ref refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_configuration" kindref="compound">TransformationRulesPassConfiguration</ref></type>
        <definition>TransformationRulesPassConfiguration microsoft::quantum::TransformationRulesPass::config_</definition>
        <argsstring></argsstring>
        <name>config_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Configuration with enabled or disabled features, recursion limits etc. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="186" column="46" bodyfile="TransformationRulesPass/TransformationRulesPass.hpp" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a34256cf8cf42c2d7621853dde04b3611" prot="private" static="no" mutable="no">
        <type>ILoggerPtr</type>
        <definition>ILoggerPtr microsoft::quantum::TransformationRulesPass::logger_</definition>
        <argsstring></argsstring>
        <name>logger_</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
<para>Logger which is used to collect information, debug info, warnings, errors and internal errors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="192" column="20" bodyfile="TransformationRulesPass/TransformationRulesPass.hpp" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a219511054f21c56b39f0313f0d5036c5" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t microsoft::quantum::TransformationRulesPass::depth_</definition>
        <argsstring></argsstring>
        <name>depth_</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Current recursion depth which is used to prevent unbound (at compile time) recursion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="198" column="18" bodyfile="TransformationRulesPass/TransformationRulesPass.hpp" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1ac2c05943cb52fb5a7cd95d653047a1c7" prot="private" static="no" mutable="no">
        <type><ref refid="classmicrosoft_1_1quantum_1_1_rule_set" kindref="compound">RuleSet</ref></type>
        <definition>RuleSet microsoft::quantum::TransformationRulesPass::const_expr_replacements_</definition>
        <argsstring></argsstring>
        <name>const_expr_replacements_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Rule set which is used to collapse compile-time constant expressions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="204" column="17" bodyfile="TransformationRulesPass/TransformationRulesPass.hpp" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1aa5b24d39ac5feba7340d5d25e9240944" prot="private" static="no" mutable="no">
        <type>std::unordered_set&lt; Value * &gt;</type>
        <definition>std::unordered_set&lt;Value*&gt; microsoft::quantum::TransformationRulesPass::active_pieces_</definition>
        <argsstring></argsstring>
        <name>active_pieces_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Set to track active Values in the code. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="210" column="28" bodyfile="TransformationRulesPass/TransformationRulesPass.hpp" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1ad897201e051c45e390e527f40162a92a" prot="private" static="no" mutable="no">
        <type>std::vector&lt; llvm::BasicBlock * &gt;</type>
        <definition>std::vector&lt;llvm::BasicBlock*&gt; microsoft::quantum::TransformationRulesPass::blocks_to_delete_</definition>
        <argsstring></argsstring>
        <name>blocks_to_delete_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Vector with block pointers to delete. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="213" column="21" bodyfile="TransformationRulesPass/TransformationRulesPass.hpp" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a28cd67ab06533636f830fcb2f5230b1e" prot="private" static="no" mutable="no">
        <type>std::vector&lt; llvm::Function * &gt;</type>
        <definition>std::vector&lt;llvm::Function*&gt; microsoft::quantum::TransformationRulesPass::functions_to_delete_</definition>
        <argsstring></argsstring>
        <name>functions_to_delete_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Vector of function pointers to delete. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="216" column="21" bodyfile="TransformationRulesPass/TransformationRulesPass.hpp" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a591bfdc977b29fa9b91bd8da79925367" prot="private" static="no" mutable="no">
        <type>Replacements</type>
        <definition>Replacements microsoft::quantum::TransformationRulesPass::replacements_</definition>
        <argsstring></argsstring>
        <name>replacements_</name>
        <briefdescription>
<para>Registered replacements to be executed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="222" column="22" bodyfile="TransformationRulesPass/TransformationRulesPass.hpp" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a325cde9035481f4c15cdff8090c179e8" prot="private" static="no" mutable="no">
        <type><ref refid="classmicrosoft_1_1quantum_1_1_profile" kindref="compound">Profile</ref> *</type>
        <definition>Profile* microsoft::quantum::TransformationRulesPass::profile_</definition>
        <argsstring></argsstring>
        <name>profile_</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to the current profile. This pointer is used to annotate top level functions with regards to how many qubits they require. TODO(issue-22): Consider moving into its own component. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="230" column="17" bodyfile="TransformationRulesPass/TransformationRulesPass.hpp" bodystart="230" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1ad2be262fef91d79effa0b39af820967a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>microsoft::quantum::TransformationRulesPass::TransformationRulesPass</definition>
        <argsstring>(RuleSet &amp;&amp;rule_set, TransformationRulesPassConfiguration const &amp;config, Profile *profile)</argsstring>
        <name>TransformationRulesPass</name>
        <param>
          <type><ref refid="classmicrosoft_1_1quantum_1_1_rule_set" kindref="compound">RuleSet</ref> &amp;&amp;</type>
          <declname>rule_set</declname>
        </param>
        <param>
          <type><ref refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_configuration" kindref="compound">TransformationRulesPassConfiguration</ref> const &amp;</type>
          <declname>config</declname>
        </param>
        <param>
          <type><ref refid="classmicrosoft_1_1quantum_1_1_profile" kindref="compound">Profile</ref> *</type>
          <declname>profile</declname>
        </param>
        <briefdescription>
<para>Custom default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="78" column="9" bodyfile="TransformationRulesPass/TransformationRulesPass.cpp" bodystart="19" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a4021ba207d45c28c5f844a2ffab41d5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>microsoft::quantum::TransformationRulesPass::TransformationRulesPass</definition>
        <argsstring>(TransformationRulesPass const &amp;)=delete</argsstring>
        <name>TransformationRulesPass</name>
        <param>
          <type><ref refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass" kindref="compound">TransformationRulesPass</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Copy construction is banned. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="84" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a8180e267b570649b10ea8c900b578f30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>microsoft::quantum::TransformationRulesPass::TransformationRulesPass</definition>
        <argsstring>(TransformationRulesPass &amp;&amp;)=default</argsstring>
        <name>TransformationRulesPass</name>
        <param>
          <type><ref refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass" kindref="compound">TransformationRulesPass</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>We allow move semantics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="87" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a08deb76861a6aa5d8fb3918d6e8b2739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>microsoft::quantum::TransformationRulesPass::~TransformationRulesPass</definition>
        <argsstring>()=default</argsstring>
        <name>~TransformationRulesPass</name>
        <briefdescription>
<para>Default destruction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="90" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1acf8a44eebe50e5141a1f9f088c1fa8ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass" kindref="compound">TransformationRulesPass</ref> &amp;</type>
        <definition>TransformationRulesPass&amp; microsoft::quantum::TransformationRulesPass::operator=</definition>
        <argsstring>(TransformationRulesPass const &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass" kindref="compound">TransformationRulesPass</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Copy assignment is banned. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="96" column="33"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a058805fa119b33e409c40cdc8787a6f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass" kindref="compound">TransformationRulesPass</ref> &amp;</type>
        <definition>TransformationRulesPass&amp; microsoft::quantum::TransformationRulesPass::operator=</definition>
        <argsstring>(TransformationRulesPass &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass" kindref="compound">TransformationRulesPass</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Move assignment is permitted. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="99" column="33"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a00addfd679de49affe569810b6cd79f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::PreservedAnalyses</type>
        <definition>llvm::PreservedAnalyses microsoft::quantum::TransformationRulesPass::run</definition>
        <argsstring>(llvm::Module &amp;module, llvm::ModuleAnalysisManager &amp;mam)</argsstring>
        <name>run</name>
        <param>
          <type>llvm::Module &amp;</type>
          <declname>module</declname>
        </param>
        <param>
          <type>llvm::ModuleAnalysisManager &amp;</type>
          <declname>mam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Implements the transformation analysis which uses the supplied ruleset to make substitutions in each function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="103" column="33" bodyfile="TransformationRulesPass/TransformationRulesPass.cpp" bodystart="747" bodyend="794"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1acddcbb6d2c3664db23f00db0f5138ea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool microsoft::quantum::TransformationRulesPass::runOnFunction</definition>
        <argsstring>(llvm::Function &amp;function, InstructionModifier const &amp;modifier)</argsstring>
        <name>runOnFunction</name>
        <param>
          <type>llvm::Function &amp;</type>
          <declname>function</declname>
        </param>
        <param>
          <type>InstructionModifier const &amp;</type>
          <declname>modifier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generic function to apply a instructionModifier (lambda function) to every instruction in the function <computeroutput>function</computeroutput>. This method follows the execution path to the extend possible and deals with branching if the branch statement can be evaluated at compile time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="114" column="14" bodyfile="TransformationRulesPass/TransformationRulesPass.cpp" bodystart="279" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a11a631e532b56a74f4682d4de8a78cb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void microsoft::quantum::TransformationRulesPass::processReplacements</definition>
        <argsstring>()</argsstring>
        <name>processReplacements</name>
        <briefdescription>
<para>Applies each of the replacements in the <computeroutput>replacements_</computeroutput> variable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="117" column="14" bodyfile="TransformationRulesPass/TransformationRulesPass.cpp" bodystart="472" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a0eb589b31225635c588c08456b593d72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void microsoft::quantum::TransformationRulesPass::setupCopyAndExpand</definition>
        <argsstring>()</argsstring>
        <name>setupCopyAndExpand</name>
        <briefdescription>
<para>Configuration function for copy and expand to setup the necessary rules. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="123" column="14" bodyfile="TransformationRulesPass/TransformationRulesPass.cpp" bodystart="29" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1adc26444e98922ba682254232d46be841" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void microsoft::quantum::TransformationRulesPass::runCopyAndExpand</definition>
        <argsstring>(llvm::Module &amp;module, llvm::ModuleAnalysisManager &amp;mam)</argsstring>
        <name>runCopyAndExpand</name>
        <param>
          <type>llvm::Module &amp;</type>
          <declname>module</declname>
        </param>
        <param>
          <type>llvm::ModuleAnalysisManager &amp;</type>
          <declname>mam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Main function for running the copy and expand functionality. This function first identifies the entry point and then follows every execution path to copy the callee function for every call instruction encountered. This makes that every call in the code has its own unique callee function which ensures that when allocating qubits or results, the assigned registers are not accidentally reused. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="130" column="14" bodyfile="TransformationRulesPass/TransformationRulesPass.cpp" bodystart="417" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a213929ddf4a326cc4f0e049c402ab9af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::Value *</type>
        <definition>llvm::Value * microsoft::quantum::TransformationRulesPass::copyAndExpand</definition>
        <argsstring>(llvm::Value *input, DeletableInstructions &amp;)</argsstring>
        <name>copyAndExpand</name>
        <param>
          <type>llvm::Value *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>DeletableInstructions &amp;</type>
          <defname>schedule_instruction_deletion</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test whether the instruction is a call instruction and copy the callee in case it is. This function collects instructions which are scheduled for deletion at a later point. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="134" column="21" bodyfile="TransformationRulesPass/TransformationRulesPass.cpp" bodystart="173" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1af7b21ae47a34ac3db1662812b8f20a68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::Function *</type>
        <definition>llvm::Function * microsoft::quantum::TransformationRulesPass::expandFunctionCall</definition>
        <argsstring>(llvm::Function &amp;callee, ConstantArguments const &amp;const_args={})</argsstring>
        <name>expandFunctionCall</name>
        <param>
          <type>llvm::Function &amp;</type>
          <declname>callee</declname>
        </param>
        <param>
          <type>ConstantArguments const &amp;</type>
          <declname>const_args</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Copies the function body and replace function arguments whenever arguments are constant. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="137" column="24" bodyfile="TransformationRulesPass/TransformationRulesPass.cpp" bodystart="796" bodyend="855"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a0e09cd930eff6dd76c11f2cbe8f426fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void microsoft::quantum::TransformationRulesPass::constantFoldFunction</definition>
        <argsstring>(llvm::Function &amp;callee)</argsstring>
        <name>constantFoldFunction</name>
        <param>
          <type>llvm::Function &amp;</type>
          <declname>callee</declname>
        </param>
        <briefdescription>
<para>Folds all constant expression in function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="140" column="14" bodyfile="TransformationRulesPass/TransformationRulesPass.cpp" bodystart="114" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a12db5661405c6b172188fc145eaf4582" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void microsoft::quantum::TransformationRulesPass::addConstExprRule</definition>
        <argsstring>(ReplacementRule &amp;&amp;rule)</argsstring>
        <name>addConstExprRule</name>
        <param>
          <type><ref refid="classmicrosoft_1_1quantum_1_1_replacement_rule" kindref="compound">ReplacementRule</ref> &amp;&amp;</type>
          <declname>rule</declname>
        </param>
        <briefdescription>
<para>Helper function to create replacements for constant expressions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="143" column="14" bodyfile="TransformationRulesPass/TransformationRulesPass.cpp" bodystart="107" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a52f2dabdac85110b1cfba2dbe642d6c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void microsoft::quantum::TransformationRulesPass::runDetectActiveCode</definition>
        <argsstring>(llvm::Module &amp;module, llvm::ModuleAnalysisManager &amp;mam)</argsstring>
        <name>runDetectActiveCode</name>
        <param>
          <type>llvm::Module &amp;</type>
          <declname>module</declname>
        </param>
        <param>
          <type>llvm::ModuleAnalysisManager &amp;</type>
          <declname>mam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="147" column="22" bodyfile="TransformationRulesPass/TransformationRulesPass.cpp" bodystart="532" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1ae5cc37e351fdd49382fdebafcb98d2b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void microsoft::quantum::TransformationRulesPass::runDeleteDeadCode</definition>
        <argsstring>(llvm::Module &amp;module, llvm::ModuleAnalysisManager &amp;mam)</argsstring>
        <name>runDeleteDeadCode</name>
        <param>
          <type>llvm::Module &amp;</type>
          <declname>module</declname>
        </param>
        <param>
          <type>llvm::ModuleAnalysisManager &amp;</type>
          <declname>mam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="148" column="22" bodyfile="TransformationRulesPass/TransformationRulesPass.cpp" bodystart="556" bodyend="633"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1ab43309dc425d43456f06abaf4eb55999" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::Value *</type>
        <definition>llvm::Value * microsoft::quantum::TransformationRulesPass::detectActiveCode</definition>
        <argsstring>(llvm::Value *input, DeletableInstructions &amp;)</argsstring>
        <name>detectActiveCode</name>
        <param>
          <type>llvm::Value *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>DeletableInstructions &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="149" column="21" bodyfile="TransformationRulesPass/TransformationRulesPass.cpp" bodystart="273" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a2c328d9003c914726e99201f854c5a59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::Value *</type>
        <definition>llvm::Value* microsoft::quantum::TransformationRulesPass::deleteDeadCode</definition>
        <argsstring>(llvm::Value *input, DeletableInstructions &amp;)</argsstring>
        <name>deleteDeadCode</name>
        <param>
          <type>llvm::Value *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>DeletableInstructions &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="150" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a09c4210fc38ebf4bea3c9ce4704eba7a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool microsoft::quantum::TransformationRulesPass::isActive</definition>
        <argsstring>(llvm::Value *value) const</argsstring>
        <name>isActive</name>
        <param>
          <type>llvm::Value *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="151" column="22" bodyfile="TransformationRulesPass/TransformationRulesPass.cpp" bodystart="412" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a1b76d2e69bd1db38df96227b177c23b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void microsoft::quantum::TransformationRulesPass::followUsers</definition>
        <argsstring>(llvm::Value *value)</argsstring>
        <name>followUsers</name>
        <param>
          <type>llvm::Value *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="153" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1aec2f95af82310283c7ec1457fea6f7e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void microsoft::quantum::TransformationRulesPass::runReplacePhi</definition>
        <argsstring>(llvm::Module &amp;module, llvm::ModuleAnalysisManager &amp;mam)</argsstring>
        <name>runReplacePhi</name>
        <param>
          <type>llvm::Module &amp;</type>
          <declname>module</declname>
        </param>
        <param>
          <type>llvm::ModuleAnalysisManager &amp;</type>
          <declname>mam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function which replaces phi nodes which refer to inactive blocks. That is, in cases where branch statement evaluates at compile time, only one block will be marked as active. For those case we can eliminate the phi nodes. In the case where branch statements cannot be evaluated all are marked as active. In this case, phi nodes are left unchanged. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="162" column="14" bodyfile="TransformationRulesPass/TransformationRulesPass.cpp" bodystart="635" bodyend="698"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1ae969e346542cbbe0902e2f1a93d563db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void microsoft::quantum::TransformationRulesPass::runApplyRules</definition>
        <argsstring>(llvm::Module &amp;module, llvm::ModuleAnalysisManager &amp;mam)</argsstring>
        <name>runApplyRules</name>
        <param>
          <type>llvm::Module &amp;</type>
          <declname>module</declname>
        </param>
        <param>
          <type>llvm::ModuleAnalysisManager &amp;</type>
          <declname>mam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="167" column="14" bodyfile="TransformationRulesPass/TransformationRulesPass.cpp" bodystart="700" bodyend="745"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a884450ed469cd68d650311179c022f2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool microsoft::quantum::TransformationRulesPass::onQubitRelease</definition>
        <argsstring>(llvm::Instruction *instruction, Captures &amp;captures)</argsstring>
        <name>onQubitRelease</name>
        <param>
          <type>llvm::Instruction *</type>
          <declname>instruction</declname>
        </param>
        <param>
          <type>Captures &amp;</type>
          <declname>captures</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="168" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a480b9c053224192ecc6dcb19f909883e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool microsoft::quantum::TransformationRulesPass::onQubitAllocate</definition>
        <argsstring>(llvm::Instruction *instruction, Captures &amp;captures)</argsstring>
        <name>onQubitAllocate</name>
        <param>
          <type>llvm::Instruction *</type>
          <declname>instruction</declname>
        </param>
        <param>
          <type>Captures &amp;</type>
          <declname>captures</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="169" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a45642740d08894a7c7329eb829f6f2aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void microsoft::quantum::TransformationRulesPass::setLogger</definition>
        <argsstring>(ILoggerPtr logger)</argsstring>
        <name>setLogger</name>
        <param>
          <type>ILoggerPtr</type>
          <declname>logger</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="176" column="14" bodyfile="TransformationRulesPass/TransformationRulesPass.cpp" bodystart="857" bodyend="860"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1ac928c8cb0c26cd36ee3f7e90ca7f9f1e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool microsoft::quantum::TransformationRulesPass::isRequired</definition>
        <argsstring>()</argsstring>
        <name>isRequired</name>
        <briefdescription>
<para>Whether or not this pass is required to run. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="172" column="21" bodyfile="TransformationRulesPass/TransformationRulesPass.cpp" bodystart="862" bodyend="865"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This class applies a set of transformation rules to the IR to transform it into a new IR. The rules are added using the <ref refid="classmicrosoft_1_1quantum_1_1_rule_set" kindref="compound">RuleSet</ref> class which allows the developer to create one or more rules on how to transform the IR.</para>
<para>The module executes the following steps: ┌─────────────────┐ │ Apply profile │ └─────────────────┘ │ ┌───────────────────────────────┐ ├───────────────▶│ Copy and expand functions │──┐ │ clone └───────────────────────────────┘ │ │ functions? │ delete dead │ │ ▼ code? │ │ ┌───────────────────────────────┐ │ ├───────────────▶│ Determine active code │ │ │ delete dead └───────────────────────────────┘ │ │ code? │ │ leave dead │ ▼ │ code? │ ┌───────────────────────────────┐ │ │ │ Simplify phi nodes │ │ │ └───────────────────────────────┘ │ │ │ │ │ ▼ │ │ ┌───────────────────────────────┐ │ │ │ Delete dead code │ │ │ └───────────────────────────────┘ │ │ │ │ │ ▼ │ │ fallback ┌───────────────────────────────┐ │ └───────────────▶│ Apply rules │◀─┘ └───────────────────────────────┘</para>
<para>Copying and expanding functions identifies function calls and identifies compile time constants passed to the function. It then copies the full implementation of the function, replacing all compile-time constants (and hence changing the function signature). That is, if a function call <computeroutput>f(x, 9)</computeroutput> is identified, it is replaced with <computeroutput>f.1(x)</computeroutput> where <computeroutput>f.1</computeroutput> is a copy of <computeroutput>f</computeroutput> with second argument written into the function. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>microsoft::quantum::TransformationRulesPass</label>
        <link refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>llvm::PassInfoMixin&lt; TransformationRulesPass &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>microsoft::quantum::TransformationRulesPass</label>
        <link refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>llvm::PassInfoMixin&lt; TransformationRulesPass &gt;</label>
      </node>
    </collaborationgraph>
    <location file="TransformationRulesPass/TransformationRulesPass.hpp" line="61" column="5" bodyfile="TransformationRulesPass/TransformationRulesPass.hpp" bodystart="62" bodyend="231"/>
    <listofallmembers>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1aa5b24d39ac5feba7340d5d25e9240944" prot="private" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>active_pieces_</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a12db5661405c6b172188fc145eaf4582" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>addConstExprRule</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a0b426f8ca398834a0904d11e182d810d" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>AllocationManagerPtr</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1ad897201e051c45e390e527f40162a92a" prot="private" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>blocks_to_delete_</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a8dc84138fb75565886b7f8c586827be5" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>Builder</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a529fcc11a8a71893a98d5a967c400016" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>Captures</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1aa3102df33b8b3f21826ebd6fb90856cc" prot="private" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>config_</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1ac2c05943cb52fb5a7cd95d653047a1c7" prot="private" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>const_expr_replacements_</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a07ac388be0bc998c320576e5c659ff91" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>ConstantArguments</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a0e09cd930eff6dd76c11f2cbe8f426fa" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>constantFoldFunction</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a213929ddf4a326cc4f0e049c402ab9af" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>copyAndExpand</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a96436bab68086f9477de7cb38a7ba6d2" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>DeletableInstructions</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a2c328d9003c914726e99201f854c5a59" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>deleteDeadCode</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a219511054f21c56b39f0313f0d5036c5" prot="private" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>depth_</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1ab43309dc425d43456f06abaf4eb55999" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>detectActiveCode</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1af7b21ae47a34ac3db1662812b8f20a68" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>expandFunctionCall</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a1b76d2e69bd1db38df96227b177c23b0" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>followUsers</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a28cd67ab06533636f830fcb2f5230b1e" prot="private" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>functions_to_delete_</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1ab1bf7939cea62871c46f2831c7d4bd08" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>ILoggerPtr</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a5b814f3af3684d6b66f405b516d33981" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>Instruction</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a5c02846dcce74acafbecaebab953224f" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>InstructionModifier</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a09c4210fc38ebf4bea3c9ce4704eba7a" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>isActive</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1ac928c8cb0c26cd36ee3f7e90ca7f9f1e" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>isRequired</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a34256cf8cf42c2d7621853dde04b3611" prot="private" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>logger_</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a480b9c053224192ecc6dcb19f909883e" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>onQubitAllocate</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a884450ed469cd68d650311179c022f2f" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>onQubitRelease</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1acf8a44eebe50e5141a1f9f088c1fa8ff" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>operator=</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a058805fa119b33e409c40cdc8787a6f8" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>operator=</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a11a631e532b56a74f4682d4de8a78cb2" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>processReplacements</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a325cde9035481f4c15cdff8090c179e8" prot="private" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>profile_</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1af0a45129ba9202ac90347601f719134f" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>Replacements</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a591bfdc977b29fa9b91bd8da79925367" prot="private" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>replacements_</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a5d02953429b53ef034e3872538cc2df2" prot="private" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>rule_set_</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1abf8768343b0fa26c376f2098a313a4ee" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>Rules</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a00addfd679de49affe569810b6cd79f3" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>run</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1ae969e346542cbbe0902e2f1a93d563db" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>runApplyRules</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1adc26444e98922ba682254232d46be841" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>runCopyAndExpand</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1ae5cc37e351fdd49382fdebafcb98d2b3" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>runDeleteDeadCode</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a52f2dabdac85110b1cfba2dbe642d6c6" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>runDetectActiveCode</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1acddcbb6d2c3664db23f00db0f5138ea3" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>runOnFunction</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1aec2f95af82310283c7ec1457fea6f7e7" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>runReplacePhi</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a45642740d08894a7c7329eb829f6f2aa" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>setLogger</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a0eb589b31225635c588c08456b593d72" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>setupCopyAndExpand</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1ad2be262fef91d79effa0b39af820967a" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>TransformationRulesPass</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a4021ba207d45c28c5f844a2ffab41d5f" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>TransformationRulesPass</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a8180e267b570649b10ea8c900b578f30" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>TransformationRulesPass</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a7507d540699f7033bcb6aeb37a0a1755" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>Value</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_transformation_rules_pass_1a08deb76861a6aa5d8fb3918d6e8b2739" prot="public" virt="non-virtual"><scope>microsoft::quantum::TransformationRulesPass</scope><name>~TransformationRulesPass</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
