<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classmicrosoft_1_1quantum_1_1_i_operand_prototype" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>microsoft::quantum::IOperandPrototype</compoundname>
    <derivedcompoundref refid="classmicrosoft_1_1quantum_1_1_any_pattern" prot="public" virt="non-virtual">microsoft::quantum::AnyPattern</derivedcompoundref>
    <derivedcompoundref refid="classmicrosoft_1_1quantum_1_1_basic_block_pattern" prot="public" virt="non-virtual">microsoft::quantum::BasicBlockPattern</derivedcompoundref>
    <derivedcompoundref refid="classmicrosoft_1_1quantum_1_1_bit_cast_pattern" prot="public" virt="non-virtual">microsoft::quantum::BitCastPattern</derivedcompoundref>
    <derivedcompoundref refid="classmicrosoft_1_1quantum_1_1_branch_pattern" prot="public" virt="non-virtual">microsoft::quantum::BranchPattern</derivedcompoundref>
    <derivedcompoundref refid="classmicrosoft_1_1quantum_1_1_call_pattern" prot="public" virt="non-virtual">microsoft::quantum::CallPattern</derivedcompoundref>
    <derivedcompoundref refid="classmicrosoft_1_1quantum_1_1_const_int_pattern" prot="public" virt="non-virtual">microsoft::quantum::ConstIntPattern</derivedcompoundref>
    <derivedcompoundref refid="classmicrosoft_1_1quantum_1_1_int_to_ptr_pattern" prot="public" virt="non-virtual">microsoft::quantum::IntToPtrPattern</derivedcompoundref>
    <derivedcompoundref refid="classmicrosoft_1_1quantum_1_1_load_pattern" prot="public" virt="non-virtual">microsoft::quantum::LoadPattern</derivedcompoundref>
    <derivedcompoundref refid="classmicrosoft_1_1quantum_1_1_phi_pattern" prot="public" virt="non-virtual">microsoft::quantum::PhiPattern</derivedcompoundref>
    <derivedcompoundref refid="classmicrosoft_1_1quantum_1_1_select_pattern" prot="public" virt="non-virtual">microsoft::quantum::SelectPattern</derivedcompoundref>
    <derivedcompoundref refid="classmicrosoft_1_1quantum_1_1_store_pattern" prot="public" virt="non-virtual">microsoft::quantum::StorePattern</derivedcompoundref>
    <derivedcompoundref refid="classmicrosoft_1_1quantum_1_1_switch_pattern" prot="public" virt="non-virtual">microsoft::quantum::SwitchPattern</derivedcompoundref>
    <derivedcompoundref refid="classmicrosoft_1_1quantum_1_1_unnamed_invoke_pattern" prot="public" virt="non-virtual">microsoft::quantum::UnnamedInvokePattern</derivedcompoundref>
    <includes refid="_i_operand_prototype_8hpp" local="no">Rules/IOperandPrototype.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1ad0ac73c9329bbc7917b6f0e5ccb76ac3" prot="public" static="no">
        <type>llvm::Instruction</type>
        <definition>using microsoft::quantum::IOperandPrototype::Instruction =  llvm::Instruction</definition>
        <argsstring></argsstring>
        <name>Instruction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/IOperandPrototype.hpp" line="23" column="9" bodyfile="Rules/IOperandPrototype.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1ac2402fc46807d48aebed3384a9cec8ed" prot="public" static="no">
        <type>std::string</type>
        <definition>using microsoft::quantum::IOperandPrototype::String =  std::string</definition>
        <argsstring></argsstring>
        <name>String</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/IOperandPrototype.hpp" line="24" column="9" bodyfile="Rules/IOperandPrototype.hpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a823a98568040aa7bf8e2b7da13c19990" prot="public" static="no">
        <type>llvm::Value</type>
        <definition>using microsoft::quantum::IOperandPrototype::Value =  llvm::Value</definition>
        <argsstring></argsstring>
        <name>Value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/IOperandPrototype.hpp" line="25" column="9" bodyfile="Rules/IOperandPrototype.hpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a909d5269c5569a5948bce3395cb59cb7" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype" kindref="compound">IOperandPrototype</ref> &gt;</type>
        <definition>using microsoft::quantum::IOperandPrototype::Child =  std::shared_ptr&lt;IOperandPrototype&gt;</definition>
        <argsstring></argsstring>
        <name>Child</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/IOperandPrototype.hpp" line="26" column="9" bodyfile="Rules/IOperandPrototype.hpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a99846defccd39bf81668c12dac580510" prot="public" static="no">
        <type>std::vector&lt; Child &gt;</type>
        <definition>using microsoft::quantum::IOperandPrototype::Children =  std::vector&lt;Child&gt;</definition>
        <argsstring></argsstring>
        <name>Children</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/IOperandPrototype.hpp" line="27" column="9" bodyfile="Rules/IOperandPrototype.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a31fcffca4d5e1447f17c7ce64a490a6a" prot="public" static="no">
        <type>std::unordered_map&lt; std::string, Value * &gt;</type>
        <definition>using microsoft::quantum::IOperandPrototype::Captures =  std::unordered_map&lt;std::string, Value*&gt;</definition>
        <argsstring></argsstring>
        <name>Captures</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/IOperandPrototype.hpp" line="28" column="9" bodyfile="Rules/IOperandPrototype.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a999f7562d379e2022be98734e563ae76" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string microsoft::quantum::IOperandPrototype::capture_name_</definition>
        <argsstring></argsstring>
        <name>capture_name_</name>
        <initializer>{&quot;&quot;}</initializer>
        <briefdescription>
<para>Name to captured value. Empty means no capture. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/IOperandPrototype.hpp" line="101" column="21" bodyfile="Rules/IOperandPrototype.hpp" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a1290d9a7bf778b01284d66f4f9563eaa" prot="private" static="no" mutable="no">
        <type>Children</type>
        <definition>Children microsoft::quantum::IOperandPrototype::children_</definition>
        <argsstring></argsstring>
        <name>children_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Children to match against the values children. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/IOperandPrototype.hpp" line="102" column="21" bodyfile="Rules/IOperandPrototype.hpp" bodystart="102" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a3c05f7599d41ac5179ff5ceceb97734c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>microsoft::quantum::IOperandPrototype::IOperandPrototype</definition>
        <argsstring>()=default</argsstring>
        <name>IOperandPrototype</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/IOperandPrototype.hpp" line="33" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1ac6fc06942a148f05ffea8d53e62f8506" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>microsoft::quantum::IOperandPrototype::~IOperandPrototype</definition>
        <argsstring>()</argsstring>
        <name>~IOperandPrototype</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/IOperandPrototype.hpp" line="34" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a9a4157b4f5b74dff9e5b413a64240236" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool microsoft::quantum::IOperandPrototype::match</definition>
        <argsstring>(Value *value, Captures &amp;captures) const =0</argsstring>
        <name>match</name>
        <reimplementedby refid="classmicrosoft_1_1quantum_1_1_any_pattern_1ade07c6212d676205ed8ff8f76d01eac3">match</reimplementedby>
        <reimplementedby refid="classmicrosoft_1_1quantum_1_1_call_pattern_1a8084bd76394d0273ed73251cda2869d9">match</reimplementedby>
        <reimplementedby refid="classmicrosoft_1_1quantum_1_1_store_pattern_1a1a6f7b94623d2d9706784e5c2e6632c7">match</reimplementedby>
        <reimplementedby refid="classmicrosoft_1_1quantum_1_1_load_pattern_1a6dacbaef74232223d5b26aac1517602e">match</reimplementedby>
        <reimplementedby refid="classmicrosoft_1_1quantum_1_1_bit_cast_pattern_1ad928c51af6c5e8662eb6fe0f8f37e6ca">match</reimplementedby>
        <reimplementedby refid="classmicrosoft_1_1quantum_1_1_int_to_ptr_pattern_1ab25edadcb4b25f3af498ada16d43fbe8">match</reimplementedby>
        <reimplementedby refid="classmicrosoft_1_1quantum_1_1_const_int_pattern_1ae02f573f32c166d13c561830dfdb8e2e">match</reimplementedby>
        <reimplementedby refid="classmicrosoft_1_1quantum_1_1_branch_pattern_1a66c84e12d5838e2dbd4be1c90a674cfc">match</reimplementedby>
        <reimplementedby refid="classmicrosoft_1_1quantum_1_1_select_pattern_1aace2c5289656f1c86e03f5a0a9a0a65c">match</reimplementedby>
        <reimplementedby refid="classmicrosoft_1_1quantum_1_1_basic_block_pattern_1a19329f853e85f43be513dd96b980580a">match</reimplementedby>
        <reimplementedby refid="classmicrosoft_1_1quantum_1_1_switch_pattern_1a736b3d9b93de5e9c91fd5e894ba2d7bc">match</reimplementedby>
        <reimplementedby refid="classmicrosoft_1_1quantum_1_1_phi_pattern_1a2b9583d067a78efe68155abd8bc9edc6">match</reimplementedby>
        <reimplementedby refid="classmicrosoft_1_1quantum_1_1_unnamed_invoke_pattern_1a7a64146e6ba54c237e73328b127cbfe6">match</reimplementedby>
        <param>
          <type>Value *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Captures &amp;</type>
          <declname>captures</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interface function which determines if a given Value matches the implemented pattern. It is expected that any implementation of <computeroutput>match</computeroutput> will return a call to either <computeroutput><ref refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1af9cf2561fc7d6bb39ec9f9486156d133" kindref="member">success()</ref></computeroutput> or <computeroutput><ref refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a25043289d7efcbe79db466f49dd51cd2" kindref="member">fail()</ref></computeroutput>. These functions will, in turn, ensure that the node is captured in the capture table (and erased upon backtracking) as well as matching children. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/IOperandPrototype.hpp" line="43" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a82a0fd5f7297e519eaf8eddac0f38ed3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>Child</type>
        <definition>virtual Child microsoft::quantum::IOperandPrototype::copy</definition>
        <argsstring>() const =0</argsstring>
        <name>copy</name>
        <reimplementedby refid="classmicrosoft_1_1quantum_1_1_any_pattern_1a275a1e5e946aabd7ccba2b6ef8494d76">copy</reimplementedby>
        <reimplementedby refid="classmicrosoft_1_1quantum_1_1_call_pattern_1a0181e57334a8fec2219474f6661768e4">copy</reimplementedby>
        <reimplementedby refid="classmicrosoft_1_1quantum_1_1_store_pattern_1a7bfd5b1923bb1e4cea37d5825ad663ac">copy</reimplementedby>
        <reimplementedby refid="classmicrosoft_1_1quantum_1_1_load_pattern_1ae684a0104ea08efe685518c2d42324bf">copy</reimplementedby>
        <reimplementedby refid="classmicrosoft_1_1quantum_1_1_bit_cast_pattern_1ae759a4a83c3d3a4fdeface11f767d40f">copy</reimplementedby>
        <reimplementedby refid="classmicrosoft_1_1quantum_1_1_int_to_ptr_pattern_1a349b928e39fe516c8b121c26539ef784">copy</reimplementedby>
        <reimplementedby refid="classmicrosoft_1_1quantum_1_1_const_int_pattern_1ad6caaf1d53b74bf3cc1768f9146a0a55">copy</reimplementedby>
        <reimplementedby refid="classmicrosoft_1_1quantum_1_1_branch_pattern_1a1e01906663829810bd1dbd5154ae8276">copy</reimplementedby>
        <reimplementedby refid="classmicrosoft_1_1quantum_1_1_select_pattern_1a6592d610b3d46c307a885432a1ef4f46">copy</reimplementedby>
        <reimplementedby refid="classmicrosoft_1_1quantum_1_1_basic_block_pattern_1a0b6bcfffcc0e2af94b132e41a526a3d7">copy</reimplementedby>
        <reimplementedby refid="classmicrosoft_1_1quantum_1_1_switch_pattern_1a0ce0c7c2a53fc3251d9ee575364d0956">copy</reimplementedby>
        <reimplementedby refid="classmicrosoft_1_1quantum_1_1_phi_pattern_1a5ae073047f9b0dd18f8333b6423307ff">copy</reimplementedby>
        <reimplementedby refid="classmicrosoft_1_1quantum_1_1_unnamed_invoke_pattern_1af9c838c21dcab2a56e1b4f5f6ddcdcda">copy</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interface function which defines a copy operation of the underlying implementation. Note that unlike normal copy operators this operation returns a shared pointer to the new copy. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/IOperandPrototype.hpp" line="47" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1af998b63b21e8a0500a952248c140d0d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void microsoft::quantum::IOperandPrototype::addChild</definition>
        <argsstring>(Child const &amp;child)</argsstring>
        <name>addChild</name>
        <param>
          <type>Child const &amp;</type>
          <declname>child</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a child to be matched against the matches children. Children are matched in order and by size. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/IOperandPrototype.hpp" line="54" column="14" bodyfile="Rules/IOperandPrototype.cpp" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a166b955925cb5f1464e20c2b94f91a78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void microsoft::quantum::IOperandPrototype::captureAs</definition>
        <argsstring>(std::string capture_name)</argsstring>
        <name>captureAs</name>
        <param>
          <type>std::string</type>
          <declname>capture_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flags that this operand should be captured. This function ensures that the captured operand is given a name. The subsequent logic in this class is responsible for capturing (upon match) and uncapturing (upon backtrack) with specified name </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/IOperandPrototype.hpp" line="60" column="14" bodyfile="Rules/IOperandPrototype.cpp" bodystart="53" bodyend="56"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a25043289d7efcbe79db466f49dd51cd2" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool microsoft::quantum::IOperandPrototype::fail</definition>
        <argsstring>(Value *value, Captures &amp;captures) const</argsstring>
        <name>fail</name>
        <param>
          <type>Value *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Captures &amp;</type>
          <declname>captures</declname>
        </param>
        <briefdescription>
<para>Function which should be called whenever a match fails. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/IOperandPrototype.hpp" line="69" column="14" bodyfile="Rules/IOperandPrototype.cpp" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1af9cf2561fc7d6bb39ec9f9486156d133" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool microsoft::quantum::IOperandPrototype::success</definition>
        <argsstring>(Value *value, Captures &amp;captures) const</argsstring>
        <name>success</name>
        <param>
          <type>Value *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Captures &amp;</type>
          <declname>captures</declname>
        </param>
        <briefdescription>
<para>Function which should be called whenever a match is successful. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/IOperandPrototype.hpp" line="72" column="14" bodyfile="Rules/IOperandPrototype.cpp" bodystart="63" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a98d4e08ac8b7098713c3adc0e3ce1e95" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool microsoft::quantum::IOperandPrototype::matchChildren</definition>
        <argsstring>(Value *value, Captures &amp;captures) const</argsstring>
        <name>matchChildren</name>
        <param>
          <type>Value *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Captures &amp;</type>
          <declname>captures</declname>
        </param>
        <briefdescription>
<para>Subroutine to match all children. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/IOperandPrototype.hpp" line="78" column="14" bodyfile="Rules/IOperandPrototype.cpp" bodystart="12" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a88789e3c997ddbad72a2ad2221652bcc" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void microsoft::quantum::IOperandPrototype::copyPropertiesFrom</definition>
        <argsstring>(IOperandPrototype const &amp;other)</argsstring>
        <name>copyPropertiesFrom</name>
        <param>
          <type><ref refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype" kindref="compound">IOperandPrototype</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shallow copy of the operand to allow name change of the capture </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/IOperandPrototype.hpp" line="85" column="14" bodyfile="Rules/IOperandPrototype.hpp" bodystart="85" bodyend="89"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1aee02b9141fc1ffa0c9318297a2009c17" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void microsoft::quantum::IOperandPrototype::capture</definition>
        <argsstring>(Value *value, Captures &amp;captures) const</argsstring>
        <name>capture</name>
        <param>
          <type>Value *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Captures &amp;</type>
          <declname>captures</declname>
        </param>
        <briefdescription>
<para>Captures the value into the captures table if needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/IOperandPrototype.hpp" line="93" column="14" bodyfile="Rules/IOperandPrototype.cpp" bodystart="75" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a9cc3002e80a014cd52a52c0d33c4e53d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void microsoft::quantum::IOperandPrototype::uncapture</definition>
        <argsstring>(Value *value, Captures &amp;captures) const</argsstring>
        <name>uncapture</name>
        <param>
          <type>Value *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Captures &amp;</type>
          <declname>captures</declname>
        </param>
        <briefdescription>
<para>Removes any captures from the captures table upon backtracking. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Rules/IOperandPrototype.hpp" line="96" column="14" bodyfile="Rules/IOperandPrototype.cpp" bodystart="83" bodyend="95"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype" kindref="compound">IOperandPrototype</ref> describes an IR pattern and allows matching against LLVMs llvm::Value type. Each value may or may not be captured during the matching process which means that they are stored in a map under a given name. Capturing is enabled using <computeroutput>captureAs(name)</computeroutput> which sets the name the value should be stored under. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="7">
        <label>microsoft::quantum::ConstIntPattern</label>
        <link refid="classmicrosoft_1_1quantum_1_1_const_int_pattern"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>microsoft::quantum::BranchPattern</label>
        <link refid="classmicrosoft_1_1quantum_1_1_branch_pattern"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>microsoft::quantum::UnnamedInvokePattern</label>
        <link refid="classmicrosoft_1_1quantum_1_1_unnamed_invoke_pattern"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>microsoft::quantum::BasicBlockPattern</label>
        <link refid="classmicrosoft_1_1quantum_1_1_basic_block_pattern"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>microsoft::quantum::CallPattern</label>
        <link refid="classmicrosoft_1_1quantum_1_1_call_pattern"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>microsoft::quantum::LoadPattern</label>
        <link refid="classmicrosoft_1_1quantum_1_1_load_pattern"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>microsoft::quantum::IOperandPrototype</label>
        <link refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype"/>
      </node>
      <node id="13">
        <label>microsoft::quantum::SwitchPattern</label>
        <link refid="classmicrosoft_1_1quantum_1_1_switch_pattern"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>microsoft::quantum::PhiPattern</label>
        <link refid="classmicrosoft_1_1quantum_1_1_phi_pattern"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>microsoft::quantum::AnyPattern</label>
        <link refid="classmicrosoft_1_1quantum_1_1_any_pattern"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>microsoft::quantum::BitCastPattern</label>
        <link refid="classmicrosoft_1_1quantum_1_1_bit_cast_pattern"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>microsoft::quantum::SelectPattern</label>
        <link refid="classmicrosoft_1_1quantum_1_1_select_pattern"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>microsoft::quantum::IntToPtrPattern</label>
        <link refid="classmicrosoft_1_1quantum_1_1_int_to_ptr_pattern"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>microsoft::quantum::StorePattern</label>
        <link refid="classmicrosoft_1_1quantum_1_1_store_pattern"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="Rules/IOperandPrototype.hpp" line="20" column="5" bodyfile="Rules/IOperandPrototype.hpp" bodystart="21" bodyend="103"/>
    <listofallmembers>
      <member refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1af998b63b21e8a0500a952248c140d0d0" prot="public" virt="non-virtual"><scope>microsoft::quantum::IOperandPrototype</scope><name>addChild</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1aee02b9141fc1ffa0c9318297a2009c17" prot="private" virt="non-virtual"><scope>microsoft::quantum::IOperandPrototype</scope><name>capture</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a999f7562d379e2022be98734e563ae76" prot="private" virt="non-virtual"><scope>microsoft::quantum::IOperandPrototype</scope><name>capture_name_</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a166b955925cb5f1464e20c2b94f91a78" prot="public" virt="non-virtual"><scope>microsoft::quantum::IOperandPrototype</scope><name>captureAs</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a31fcffca4d5e1447f17c7ce64a490a6a" prot="public" virt="non-virtual"><scope>microsoft::quantum::IOperandPrototype</scope><name>Captures</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a909d5269c5569a5948bce3395cb59cb7" prot="public" virt="non-virtual"><scope>microsoft::quantum::IOperandPrototype</scope><name>Child</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a99846defccd39bf81668c12dac580510" prot="public" virt="non-virtual"><scope>microsoft::quantum::IOperandPrototype</scope><name>Children</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a1290d9a7bf778b01284d66f4f9563eaa" prot="private" virt="non-virtual"><scope>microsoft::quantum::IOperandPrototype</scope><name>children_</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a82a0fd5f7297e519eaf8eddac0f38ed3" prot="public" virt="pure-virtual"><scope>microsoft::quantum::IOperandPrototype</scope><name>copy</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a88789e3c997ddbad72a2ad2221652bcc" prot="protected" virt="non-virtual"><scope>microsoft::quantum::IOperandPrototype</scope><name>copyPropertiesFrom</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a25043289d7efcbe79db466f49dd51cd2" prot="protected" virt="non-virtual"><scope>microsoft::quantum::IOperandPrototype</scope><name>fail</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1ad0ac73c9329bbc7917b6f0e5ccb76ac3" prot="public" virt="non-virtual"><scope>microsoft::quantum::IOperandPrototype</scope><name>Instruction</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a3c05f7599d41ac5179ff5ceceb97734c" prot="public" virt="non-virtual"><scope>microsoft::quantum::IOperandPrototype</scope><name>IOperandPrototype</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a9a4157b4f5b74dff9e5b413a64240236" prot="public" virt="pure-virtual"><scope>microsoft::quantum::IOperandPrototype</scope><name>match</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a98d4e08ac8b7098713c3adc0e3ce1e95" prot="protected" virt="non-virtual"><scope>microsoft::quantum::IOperandPrototype</scope><name>matchChildren</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1ac2402fc46807d48aebed3384a9cec8ed" prot="public" virt="non-virtual"><scope>microsoft::quantum::IOperandPrototype</scope><name>String</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1af9cf2561fc7d6bb39ec9f9486156d133" prot="protected" virt="non-virtual"><scope>microsoft::quantum::IOperandPrototype</scope><name>success</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a9cc3002e80a014cd52a52c0d33c4e53d" prot="private" virt="non-virtual"><scope>microsoft::quantum::IOperandPrototype</scope><name>uncapture</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1a823a98568040aa7bf8e2b7da13c19990" prot="public" virt="non-virtual"><scope>microsoft::quantum::IOperandPrototype</scope><name>Value</name></member>
      <member refid="classmicrosoft_1_1quantum_1_1_i_operand_prototype_1ac6fc06942a148f05ffea8d53e62f8506" prot="public" virt="virtual"><scope>microsoft::quantum::IOperandPrototype</scope><name>~IOperandPrototype</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
