on:
  release:
    types:
      - created
  pull_request:
    branches:
    - main
    
jobs:
  build:
    runs-on: ${{ matrix.config.os }}
    env: ${{ matrix.config.env }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              os: "ubuntu-20.04",
              arch: "amd64",
              env: {},
            }
#          - {
#              os: "windows-2019",
#              arch: "amd64",
#              env: {},
#            }
          - {
              os: "macOS-10.15",
              arch: "amd64",
              env: {},
            }
    name: Upload Release Asset
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: "Installing Linux dependencies"
        if: ${{ matrix.config.os == 'ubuntu-20.04' }}
        run: |
          sudo apt-get update -y
          sudo apt-get install -y 
          sudo apt-get remove -y llvm-12
          sudo apt-get install -y curl pkg-config findutils  wget
          sudo apt install -y clang-11 cmake clang-format-11 clang-tidy-11 
          sudo apt-get install -y llvm-11 lldb-11 llvm-11-dev libllvm11 llvm-11-runtime
          sudo apt install -y python3 python3-pip 
          sudo apt-get remove -y llvm-10
          sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 0
          git submodule update --init --recursive
          pip install -r requirements.txt  
          chmod +x manage
        env:
          DEBIAN_FRONTEND: noninteractive
          PYTHONUNBUFFERED: 1
          PYTHON_BIN_PATH: /usr/bin/python3
          CC: clang-11
          CXX: clang++-11

      - name: "Installing Mac dependencies"
        if: ${{ matrix.config.os == 'macOS-10.15' }}
        run: |
          rm '/usr/local/bin/2to3'        
          brew install llvm@11
          brew install cmake
          brew install python@3.9
          brew unlink python@3.9
          brew link python@3.9
          echo "/usr/local/opt/llvm@11/bin" >> $GITHUB_PATH
          git submodule update --init --recursive
          pip3 install --user -r requirements.txt 
          dotnet tool install --global Microsoft.Quantum.IQSharp --version 0.20.2110171573     
          chmod +x manage

          exec -l $SHELL

      - name: "Checking format"
        run: |
          ./manage stylecheck        
        env:
          LDFLAGS: "-L/usr/local/opt/llvm@11/lib -Wl,-rpath,/usr/local/opt/llvm@11/lib"
          CPPFLAGS: "-I/usr/local/opt/llvm@11/include"
          CC: clang
          CXX: clang++

      - name: "Running unit tests"
        run: |
          ./manage test
        env:
          DEBIAN_FRONTEND: noninteractive
          PYTHONUNBUFFERED: 1
          PYTHON_BIN_PATH: /usr/bin/python3
          CC: clang-11
          CXX: clang++-11

      - name: "Build project"
        run: |
          mkdir -p Release
          cd Release
          cmake .. -DMICROSOFT_ENABLE_DYNAMIC_LOADING=0
          make qat
          cd ..
          mv Release/qir/qat/Apps/qat ./
          chmod +x qat
          tar cf qat-ubuntu-20.zip qat          
        env:
          DEBIAN_FRONTEND: noninteractive
          PYTHONUNBUFFERED: 1
          PYTHON_BIN_PATH: /usr/bin/python3          
          CC: clang-11
          CXX: clang++-11

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./qat-ubuntu-20.zip
          asset_name: qat-ubuntu-20.zip
          asset_content_type: application/zip